#!/bin/zsh

#  zparse
#  /usr/local/zterm/zsh/functions (id: 38)
#
#  Generated by 'ztemplate_apply' (zterm/zsh/sources) on 2020-10-12
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# zparse
# Parse a single zsh option.
#
# Usage:
# zparse -[aA] <array>
#        --name O [--zero]
#        [--each] [--flag] [--merge] [--optional]
#        [--] $argv
local array_{id,type}
local zspec_name
local -i opt_zero=0 zspec_{each,flag,merge,optional}
while [[ "$1" =~ ^[-] ]]; do
  case "$1" in
    # Name of option without the first leading dash (e.g.: o, -option)
    (-n|--name)
      [[ -v 2 ]] || error -1 -m 'missing argument for option ${1}'
      zspec_name=$2
      shift ;;
    # Array to store results
    (-[aA])
      [[ -v 2 ]] || error -1 -m 'missing argument for option ${1}'
      array_type=$1
      array_id=$2
      shift ;;
    # Prepend option name to results (like $0)
    (-z|--zero)     let opt_zero=1 ;;
    
    # Option specifications
    (-e|--each)     let zspec_each=1 ;;
    (-f|--flag)     let zspec_flag=1 ;;
    (-m|--merge)    let zspec_merge=1 ;;
    (-o|--optional) let zspec_optional=1 ;;
    
    (--) shift && break ;;
    (*) error -1 -m 'bad option: ${1}' ;;
  esac
  shift
done
[[ -z "$zspec_name" ]] && error -1 'option name not specified'

# Create option spec for 'zparseopts'
local spec="$zspec_name"
[[ $zspec_each -eq 1 ]] && spec+='+'
if [[ $zspec_flag -ne 1 ]]; then
  spec+=':'
  [[ $zspec_merge    -eq 1 ]] && spec+='-'
  [[ $zspec_optional -eq 1 ]] && spec+=':'
fi

# Create output array
if [[ -z "$array_id" ]]; then
  array_id='reply'
  array_type='-a'
fi
typeset -g $array_type $array_id


local -a optargs=() optname=("-${zspec_name}")
builtin zparseopts -E -a optargs - $spec
case $opt_zero in
  0) set -A $array_id   ${optargs:|optname} ;;
  1) set -A $array_id   $optname ${optargs:|optname} ;;
esac

#  builtin zparseopts -E $array_type $array_id - $spec

return 0









#set -- -i alice --other otherX -i bob -i charlie '.....' REST{1..5}
#print -P -- "%F{4}${0}%f: argv[${#}] = {${(j:, :)argv}}"

#typeset -a opt_i
#zparse -a opt_i --name 'i' --each -- $argv
#print -- "opt_i[${#opt_i}] = {${opt_i}}"
