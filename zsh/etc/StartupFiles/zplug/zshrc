#  .zshrc
#
#
#  Created by mpuchkov/506:20 on April 08, 2021.
#  ~zterm2/zsh/etc/StartupFiles/zplug/zshrc


###  Powerlevel10k  ###
# Enable instant prompt. Should stay close to the top of ~/.zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit '$ZDOTDIR/.p10k.zsh'.
[[ ! -f $ZDOTDIR/.p10k.zsh ]] || source $ZDOTDIR/.p10k.zsh


# path=(/usr/local/bin /usr/bin /bin /usr/sbin /sbin)
###  Paths  ###
# path=(
#   "/usr/local/opt/openssl/bin/"
#   $path[@]
#   "$HOME/bin"
#   "$ZDOTDIR/bin"
# )
fpath=(
  "/usr/share/zsh/$ZSH_VERSION/functions"
  "$ZDOTDIR/functions"
  "$ZDOTDIR/completions"
)




###  zplug  ###
ZPLUG_HOME="$HOME/.local/share/zplug"
ZPLUG_CACHE_DIR="$HOME/.cache/zplug"
source "$ZPLUG_HOME/init.zsh" || return

zplug "lib/cli",        from:oh-my-zsh
zplug "lib/completion", from:oh-my-zsh
zplug "$ZDOTDIR/lib",   from:local
# zplug "plugins/git",    from:oh-my-zsh
zplug "plugins/osx",    from:oh-my-zsh
# zplug 'zsh-users/zsh-autosuggestions'
# zplug 'zsh-users/zsh-syntax-highlighting', defer:2
zplug "romkatv/powerlevel10k", as:theme, depth:1
if ! zplug check; then
  zplug install &!
fi
zplug load




###  Options  ###
setopt interactivecomments
setopt long_list_jobs
setopt extended_glob                    # Glob 
setopt glob_assign
setopt hist_find_no_dups                # History
setopt hist_ignore_all_dups
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt hist_subst_pattern
setopt share_history
setopt extended_history
setopt auto_cd                          # Change directories
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_minus




###  Parameters  ###
# Zsh history
HISTFILE="$ZDOTDIR/.zsh_history"
HISTSIZE=250000
SAVEHIST=250000

# ls
if [[ "$(tput colors)" -gt 8 ]]; then
  export LSCOLORS="GxFxcxdxbxegedabagacah"
else
  export LSCOLORS="Exfxcxdxbxegedabagacad"
fi
export LS_COLWIDTHS="8:3:3:0:6:8:4:0"

# Homebrew
export HOMEBREW_EVAL_ALL=1

# Python
export PYTHONDONTWRITEBYTECODE=1
export PYTHONSTARTUP="$HOME/private/etc/.pythonstartup"

# Other parameters
ZSH_CUSTOM="$ZDOTDIR/lib"
export CODE_EDITOR="Visual Studio Code"

# Set user's env parameters from ~/var/select/env
if [[ -d ~/var/select/env ]]; then
  for f in ~/var/select/env/*(N@); do
    export "${f:t}"="$(readlink ${f})"
  done
fi


###  Autoload Functions  ###
# compinit: completion system.
autoload -Uz compinit
compinit -i -d "$ZDOTDIR/.zcompdump"

# run-help: zsh builtin help.
unalias -m run-help
typeset HELPDIR="/usr/share/zsh/$ZSH_VERSION/help"
autoload -Uz run-help


# styles: set command line colors and text effects.
autoload -Uz styles && styles -UA

# zcompare: compare and compile zsh files if needed.
autoload -Uz zcompare
zcompare -U -z -R $ZDOTDIR/zwc/zshrc.zwc $ZDOTDIR/.zshrc
zcompare -U -z -R $ZDOTDIR/zwc/zprofile.zwc $ZDOTDIR/.zprofile
zcompare -U -z -M $ZDOTDIR/zwc/functions.zwc $ZDOTDIR/functions/*
zcompare -U -z -M $ZDOTDIR/zwc/completions.zwc $ZDOTDIR/completions/*
autoload -w $ZDOTDIR/zwc/*.zwc(N-.)










###  Path modifications  ### 
# llvm
export LDFLAGS="-L/usr/local/opt/llvm/lib -L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"
export CPPFLAGS="-I/usr/local/opt/llvm/include"
# path=(/usr/local/opt/llvm/bin $path)

# Cargo
# path=(~/.cargo/bin $path)
#source $HOME/.cargo/env

# Solana
#path=(~/.local/share/solana/install/active_release/bin/sdk/bpf/scripts $path)
#path=(~/.cache/solana/v1.21/bpf-tools/rust/bin $path)



###  Source files  ###
# Load user's zsh configuration
if [[ -e ~/private/zsh/.zshrc ]]; then
  source ~/private/zsh/.zshrc
fi

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh

  # export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters












# New functions (should be moved to other files) #
export OPENSSL_CIPHER="aes-256-cbc" #"aria-256-ofb"
export OPENSSL_OPTIONS=(-salt -pbkdf2) #-pass pass:$USER)
if [[ -f ~/private/etc/openssl_password ]]; then
  export OPENSSL_PASSWORD=$(<~/private/etc/openssl_password)
fi


### Moved to ~/bin/encrypt ###
# encrypt <file> - encrypt a file and save it as <file.enc>
# function encrypt {
#   typeset file="$1"
#   shift
#   openssl $OPENSSL_CIPHER $OPENSSL_OPTIONS -in $file "$@"
#   #-out "${file}.enc"
# }

# # decrypt <file> - decrypt an encrypted file and save it as <file.new>
# function decrypt {
#   typeset file="$1"
#   shift
#   openssl $OPENSSL_CIPHER -d $OPENSSL_OPTIONS -in $file "$@"
#   #-out "${file:r}.new"
# }


# copymode <src> [<dest> ...] - copy file mode from `src` to `dest[]` files
function copymode {
  local src="$1"
  shift
  local mode=`command stat -f '%Lp' $src`
  local dest
  for dest; do
    command chmod $mode $dest && printf 'Changed mode of %s to %i\n' "$dest" $mode || error -1 -m 'failed to change mode of ${dest}'
  done
}


# isascii <file ...> - check if `file` is ASCII or Binary
function isascii {
  local encoding="ascii"
  local f
  for f; do
    [[ -e $f  ]] || error -1 -m 'file does not exist: ${f}'
    [[ ! -d $f ]] || error -1 -m '${f} is a directory'
    printf '%s: ' "$f"
    if command iconv --from-code=$encoding --to-code=$encoding "$f" &>/dev/null; then
      echo "ascii"
    else
      echo "binary"
    fi
  done
}

# onlyascii <file> - print only ASCII characters from a `file`
function onlyascii {
  local encoding="ascii"
  command iconv -f $encoding -t $encoding -c $1
}


# cmdlog <command> - print logs for `command`
function cmdlog {
  local cmd_name="$1"
  command log show --predicate "process == '${cmd_name}'"
}


# isstdin - returns 0 if process can read from standard input.
function isstdin {
  [[ ! -t 0 || -p /dev/stdin ]]
}

function setstdin {
  if isstdin; then
    set -- "${(@f)$(<&0)}"
  else
    error -1 -m 'no input'
  fi
}


# percent <num> <total> - calculate percentage of the given number in total.
function percent {
  typeset -F result num total
  let num="$1"
  let total="$2"
  let result="$num / $total * 100"
  printf '%.2f%%\n' $result
}


function lorem {
  typeset outfile=$1
  typeset loremfile=/Users/Shared/Files/lorem.txt
  command cp $loremfile $outfile
}







### PRIVATE DATA ###
# SECRETS: #

# *** removed











# ?
function youtube-mp32 {
  typeset url="$1"
  youtube-dl --extract-audio --audio-format mp3 "$url"
}




# Check if the argument(s) are in path
function in-path {
  for arg; do
    local dir="${arg:a}"
    case ":${PATH}:" in
        *:"${arg:A}":*)
          green "directory ${dir} is in PATH"
          ;;
        *)
          # Prepending path in case a system-installed rustc needs to be overridden
          red directory "${dir} is not in PATH"
          ;;
    esac
  done
}


# Cd to directory of the given path (if it's not a directory)
function cdd {
  local path="$1"
  while [[ ! -d $path ]]; do
    path=${path:h}
  done
  echo "cd ${(D)path}"
  cd $path
}
