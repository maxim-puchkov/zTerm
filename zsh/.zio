# Input/output styles.


function fg_color() { tput setaf ${1:?} }
function bg_color() { tput setab ${1:?} }
function boldtext() { tput bold }




#MARK: Styles Definitions
NORMAL=$'\e[0m'
  NONE=$NORMAL
  RESET=$NORMAL
BOLD=$'\e\[1m'
DIM=$'\e\[2m'
ITALIC=$'\e\[3m'
UNDERLINE=$'\e\[4m'
STANDOUT=$'\e\[7m'

#MARK: Foreground Definitions
# Default
BLACK="$( fg_color 0 )"
WHITE="$( fg_color 15 )"
RED="$( fg_color 1 )"
GREEN="$( fg_color 2 )"
YELLOW="$( fg_color 3 )"
BLUE="$( fg_color 4 )"
MAGENTA="$( fg_color 5 )"
CYAN="$( fg_color 6 )"
LGREY="$( fg_color 7 )"
DGREY="$( fg_color 8 )"
# Bright
B_RED="$( fg_color 9 )"
B_GREEN="$( fg_color 10 )"
B_YELLOW="$( fg_color 11 )"
B_BLUE="$( fg_color 12 )"
B_MAGENTA="$( fg_color 13 )"
B_CYAN="$( fg_color 14 )"
# Bold
BBLACK="${BOLD}${BLACK}"
BWHITE="${BOLD}${WHITE}"
BRED="${BOLD}${RED}"
BGREEN="${BOLD}${GREEN}"
BYELLOW="${BOLD}${YELLOW}"
BBLUE="${BOLD}${BLUE}"
BMAGENTA="${BOLD}${MAGENTA}"
BCYAN="${BOLD}${CYAN}"
BLGREY="${BOLD}${LGREY}"
BDGREY="${BOLD}${DGREY}"
# Bold
B_BRED="${BOLD}${B_RED}"
B_BGREEN="${BOLD}${B_GREEN}"
B_BYELLOW="${BOLD}${B_YELLOW}"
B_BBLUE="${BOLD}${B_BLUE}"
B_BMAGENTA="${BOLD}${B_MAGENTA}"
B_BCYAN="${BOLD}${B_CYAN}"

#MARK: Background Definitions
# Default
BLACKBG="$( bg_color 0 )"
WHITEBG="$( bg_color 255 )"
REDBG="$( bg_color 1 )"
GREENBG="$( bg_color 2 )"
YELLOWBG="$( bg_color 3 )"
BLUEBG="$( bg_color 4 )"
MAGENTABG="$( bg_color 5 )"
CYANBG="$( bg_color 6 )"
LGREYBG="$( bg_color 7 )"
DGREYBG="$( bg_color 8 )"
# Bright
B_REDBG="$( bg_color 9 )"
B_GREENBG="$( bg_color 10 )"
B_YELLOWBG="$( bg_color 11 )"
B_BLUEBG="$( bg_color 12 )"
B_MAGENTABG="$( bg_color 13 )"
B_CYANBG="$( bg_color 14 )"





#MARK: - Aliases 
#MARK: Styles
function normal() { __style_print "$NORMAL$*" }
function dim() { __style_print "$DIM$*" }
  D() dim $@
function bold() { __style_print "$*" }
  B() bold $@
function italic() { __style_print "$ITALIC$*" }
  em() italic $@
  it() italic $@
function underline() { __style_print "$UNDERLINE$*" }
  U() underline $@
function Standout() { __style_print "$STANDOUT$*" }
  S() Standout $@

#MARK: Foreground
# Default
function black() { __style_print "$BLACK$*" }
function red() { __style_print "$RED$*" }
function green() { __style_print "$GREEN$*" }
function yellow() { __style_print "$YELLOW$*" }
function blue() { __style_print "$BLUE$*" }
function magenta() { __style_print "$MAGENTA$*" }
function cyan() { __style_print "$CYAN$*" }
function lgrey() { __style_print "$LGREY$*" }
  grey() lgrey $@
# Bright
function dgrey() { __style_print "$DGREY$*" }
function b_red() { __style_print "$B_RED$*" }
function b_green() { __style_print "$B_GREEN$*" }
function b_yellow() { __style_print "$B_YELLOW$*" }
function b_blue() { __style_print "$B_BLUE$*" }
function b_magenta() { __style_print "$B_MAGENTA$*" }
function b_cyan() { __style_print "$B_CYAN$*" }
function white() { __style_print "$WHITE$*" }
# Bold
function bblack() { __style_print "$BBLACK$*" }
function bred() { __style_print "$BRED$*" }
function bgreen() { __style_print "$BGREEN$*" }
function byellow() { __style_print "$BYELLOW$*" }
function bblue() { __style_print "$BBLUE$*" }
function bmagenta() { __style_print "$BMAGENTA$*" }
function bcyan() { __style_print "$BCYAN$*" }
function blgrey() { __style_print "$BLGREY$*" }
# Bright Bold
function bdgrey() { __style_print "$BDGREY$*" }
function b_bred() { __style_print "$B_BRED$*" }
function b_bgreen() { __style_print "$B_BGREEN$*" }
function b_byellow() { __style_print "$B_BYELLOW$*" }
function b_bblue() { __style_print "$B_BBLUE$*" }
function b_bmagenta() { __style_print "$B_BMAGENTA$*" }
function b_bcyan() { __style_print "$B_BCYAN$*" }
function bwhite() { __style_print "$BWHITE$*" }

#MARK: Background
# Default
function blackbg() { __style_print "$BLACKBG$*" }
function whitebg() { __style_print "$WHITEBG$*" }
function redbg() { __style_print "$REDBG$*" }
function greenbg() { __style_print "$GREENBG$*" }
function yellowbg() { __style_print "$YELLOWBG$*" }
function bluebg() { __style_print "$BLUEBG$*" }
function magentabg() { __style_print "$MAGENTABG$*" }
function cyanbg() { __style_print "$CYANBG$*" }
function lgreybg() { __style_print "$LGREYBG$*" }
  greybg() lgreybg $@
function dgreybg() { __style_print "$DGREYBG$*" }
# Bright
function b_redbg() { __style_print "$B_REDBG$*" }
function b_greenbg() { __style_print "$B_GREENBG$*" }
function b_yellowbg() { __style_print "$B_YELLOWBG$*" }
function b_bluebg() { __style_print "$B_BLUEBG$*" }
function b_magentabg() { __style_print "$B_MAGENTABG$*" }
function b_cyanbg() { __style_print "$B_CYANBG$*" }




#MARK: - Old Styles
function OK() {
    b_green "${*:-$0}"
}
function Warn() {
    yellow "${*:-$0}"
}
function InfoSection() {
    b_bcyan $(underline "$*")
}
function Info() {
    cyan "${*:-$0}"
}
function Bad() {
    b_red "${*:-$0}"
}
function group() {
    local color=$1
    local lt=$2
    local rt=$3
    local text=$4
    echo "$($color $lt)${text}$($color $rt)"
}

function print_h1() {
    print -P -- "%B%K{11}%F{16} ${(U)argv} %f%k%b"
}







typeset -aH __COLOR_NAMES__=(
    'RED'  'GREEN'   'YELLOW'
    'BLUE' 'MAGENTA' 'CYAN'
)

error_color=9
logf_color=4






function __style_print() {(
    typeset style_formats
    if [[ -v fmt ]]; then
        style_formats+="$(color_seq $fmt)"
    fi
    
    typeset style_reset='\e[0m'
    printf '%b%s%b\n' "$style_formats" "$argv" "$style_reset"
    return 0
)}




function color_seq() {(
    typeset -a color_codes
    local color_name
    for color_name in $=argv; do
        local c=${color[$color_name]}
        if [[ -n $c ]]; then
            color_codes+=($c)
        else
            color_codes+=(0)
            error -0 +R 'Color $color_name is not recognized'
        fi
    done
    printf '%s' "\e[${(j.;.)color_codes}m"
    return 0
)}

typeset -AHx text_labels
set -A text_labels $((
    typeset reset_seq='\e[0m'
    while IFS=':' read label style; do
        seq="$(color_seq $=style)"
        for name in ${=${(s:,:)label}}; do
            style="${seq}${name}${reset_seq}"
            printf '%s %b\n' "$name" "$style"
        done
    done <${1:-$zterm/etc/labels} 2>/dev/null
))





function print-control-char() {
    typeset -i10 -Z2 code
    for code in $argv; do
        typeset hex=0x${code[1,2]}
        if [[ -t 1 ]]; then
            printf '%s:  ' "${hex}"
        fi
        printf '%b\n' "\\${hex}"
    done
    return 0
}
