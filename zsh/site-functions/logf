#!/bin/zsh

#  logf
#  Z-Function (61)
#
#  Created by Maxim Puchkov on 2020-06-09.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# logf
function logf() {
    typeset -i last_status=$status
    typeset -a flags=(-P -X2)
    
    # Format text syntax
    function syntaxf() {
        typeset -A syntaxf_opts
        get-arguments -A syntaxf_opts -o 'c' -- $argv
        # Highlight color
        typeset output_color=$logf_color
        if [[ -n $syntaxf_opts[-c] ]]; then
            output_color=$syntaxf_opts[-c]
        fi
        # Placeholder label
        typeset undefined_label='%F{3}undefined%f'
        # Find and replace variables
        typeset find replace
        find='[$]([{])?(([A-Za-z_\(][^ ]*)?[A-Za-z0-9!@#$%^&*=?_\)])([}])?'
        replace="%U%F{${output_color}}\${\${\2}:-${(%)undefined_label}}%f%u"
        # Highlight variables in description
        sed -E "s/$find/$replace/g" <<< "${argv}"
    }
    
    
    #MARK: - Options
    autoload -Uz get-arguments
    typeset -A optlist
    get-arguments -o 'c' -f '-short' -- $argv
    
    ## logf -c: log a status code different from last command's ##
    if [[ -n $optlist[-c] ]]; then
        last_status=$optlist[-c]
    fi
    
    # Log message prefix and description
    typeset prefix description
    if [[ -n $argv ]]; then
        description=$(syntaxf ${argv%.})
    else
        case $last_status in
            0) description='OK'     ;;
            *) description='Error'  ;;
        esac
    fi
    
    # Message prefix components
    typeset date host program pid
    date='%D{%b-%d-%Y %T}'
    host='%n@%m'
    program='${0:t}'
    pid='$$'
    
    # Additional formatting when outputting to
    # terminal file descriptor
    if [[ -t 1 ]]; then
        # description="%F{4}${description}%f"
        host="${host/@/%F\{7\}@%f}"
        program="%B${program}%b"
    fi
   
    # Format message prefix (default style: long)
    ## logf --short: do not log date and hostname ##
    if [[ -z $optlist[--short] ]]; then
        prefix="[${date}]\t${host}\t${program}[$pid] -> ${last_status}"
    else
        prefix="${program}[$pid] -> ${last_status}"
    fi
    
    
    # Print the log message in the environment of
    # the parent process
    typeset log="${prefix}:\t\t${description}."
    trap "builtin print ${flags} -- \"${log}\";" EXIT
    return 0
}
