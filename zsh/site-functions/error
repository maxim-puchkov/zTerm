#!/bin/zsh

#  error
#
#
#  Created by admin on 2020-03-02.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Print an error/warning and its description.
#   * Error - the caller will terminate at an error
#     and return the error code (default code: 1).
#       error -1   'Fatal error'
#       error -127 'Command not found'
#
#   * Warning - the caller will not terminate at a warning
#     and continue without returning any value.
#       warning  'description...'
#       error -0 'description...'
#
function error() {
    #MARK: - Data
    # Message
    typeset message
    typeset message_title
    typeset message_desc
    # Exit code
    typeset exit_code=1
    typeset exit_code_label
    # Output
    typeset output_device
    
    function error-plain-title() {
        unfunction error-format-title
        function error-format-title() { return 0; }
    }
    function error-plain-description() {
        unfunction error-format-description
        function error-format-description() { return 0; }
    }
    
    #MARK: - Functions
    # Parse function options and flags
    function error-parse-options() {
        set -- $@
        # Exit code flag (must be the first argument)
        if [[ $1 =~ '-[0-9]+' ]]; then
            exit_code=${1#-}
            shift
        fi
        # Other options
        while [[ $1 =~ '^-' ]]; do
            case $1 in
                # Display the exit code for errors
                -c|--code)
                    exit_code_label=" %F{7}[$exit_code]%f"
                ;;
                # Do not format description
                -p|--plain-description)
                    error-plain-description
                ;;
                # Silence output
                -n|--null)
                    output_device=/dev/null
                ;;
                -u|--usage)
                    message_title='%F{4}Usage%f'
                    error-plain-title
                    error-plain-description
                ;;
                # Stop parsing options
                --) shift ;&
                *)  break ;;
            esac
            shift
        done
        # Set description to the remaining arguments
        message_desc="$@"
        return 0
    }
    # Title - text, color, and exit code
    function error-format-title() {
        if [[ $exit_code -gt 0 ]]; then
            message_title='%F{1}Error%f'
        else
            message_title='%F{3}Warning%f'
        fi
        return 0
    }
    # Description - capitalization, trailing period
    function error-format-description() {
        message_desc="${message_desc:-No description.}"
        message_desc="${(C)message_desc[1]}${${message_desc:1}}"
        if [[ ! "${(q)message_desc}" =~ $'\n' ]] &&
           [[ ! "${(q)message_desc}" =~ '^.*\.$' ]]; then
            message_desc="${message_desc}."
        fi
        return 0
    }
    # Message - title, description, and return status
    function error-format-message() {
        error-format-title
        error-format-description
        message="%U${message_title}%u${exit_code_label}"
        if [[ -n $message_desc ]]; then
            message="${message}: ${message_desc}"
        else
            message="${message}."
        fi
        return 0
    }
    # Format and print the error/warning message
    function error-print() {
        error-format-message
        print -P -- "$message" >${output_device:-/dev/stderr}
        return 0
    }
    
    
    error-parse-options "$@"
    error-print
    
    unfunction -m "${0}-*"
    trap "return $exit_code" EXIT
    return $exit_code
}
