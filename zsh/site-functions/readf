#!/bin/zsh

#  readf
#  Z-Function (63)
#
#  Created by Maxim Puchkov on 2020-06-09.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Read an input file into an array so that N'th line of the file
# is the N'th element of the array.
#
# Optiins:
## readf -e PATTERN: exclude matching lines ##
function readf() {
    typeset -i input_fd=0
#    if [[ $optlist[-t] -eq 1 ]]; then
        if [[ -t $input_fd ]]; then
            error -2 'Cannot read from $input_fd'
        fi
#    fi
    
    #MARK: - Options
    autoload -Uz get-arguments
    typeset -A optlist
    get-arguments -A optlist \
                  -f 'v' 's' 't' \
                  -o 'e' \
                  -- ${argv}
    
    # Initialzie variables
    typeset array_id=${1:-'array'}
    typeset input_file=/dev/stdin
    typeset output_file=/dev/null
    ## readf -v: be verbose ##
    if [[ -n $optlist[-v] ]]; then
        output_file=/dev/stdout
    fi
    
    
    #MARK: - Read File
    # Input file path
    
    # Read and store the input file in an array
    typeset -a file_contents
    typeset -i line_count
#    typeset -a patterns
#    patterns=('s/^[\h\v]+//g' 's/[\h\v]+$/\n/g')
    () {
        file_contents=(${(@f)"$(<$1)"})
        line_count=${#file_contents}
        if [[ $line_count -eq 0 ]]; then return 1; fi
    } <( /usr/bin/perl \
            -p -e 's/^[\h\v]+//g;  s/[\h\v]+$/\n/g;' \
            <$input_file )
#    patterns=('s/^[\h\v]+//g' '/[\h\v]+$/\n/g')
#    () {  file_contents=(${(@f)"$(<$1)"})
#          line_count=${#file_contents}
#          if [[ $line_count -eq 0 ]]; then return 1; fi
#    } <(  /usr/bin/perl -p -e    \
#             ${(j:; :)patterns}  \
#             <$input_file  )
    
    
    ## readf -s: skip empty lines ##
    if [[ -n $optlist[-s] ]]; then
        file_contents=(${file_contents:#})
    fi
    ## readf -e <pattern>: exclude lines matching pattern ##
    if [[ -n $optlist[-e] ]]; then
        file_contents=(${file_contents:#${~optlist[-e]}})
    fi
    
    
    #MARK: - Save file contents in an array
    unset $array_id
    typeset -ag $array_id
    set -A $array_id $file_contents
    
    #MARK: - Log
    autoload logf
    logf 'read ${line_count} lines'\
         'from ${input_file}' \
         'into ${array_id}.' \
         1>$output_file \
         2>&1
    
    return 0
}
