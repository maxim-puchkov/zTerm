#!/bin/zsh

#  misc.zsh
#  Generated by mkzsh at 07:18pm.
#
#  Created by mpuchkov/506:20 on April 06, 2021.
#  ~/private/zsh/lib/misc.zsh


#???: timeinfo <file>
function timeinfo() {
  stat -t '%Y-%b-%d at %l:%M:%S %p' -f 'Modified:%t%Sm' $@
}

#???: sedd <sed_cmds>
# Quickly test sed on a file.
function sedd() {
  if [[ ! -v SED_FILE ]]; then
    print -z 'export SED_FILE='
    error -1 -m 'parameter is not set: ${SED_FILE}'
  fi
  SED_CMDS="$*"
  if [[ -z "$SED_CMDS" ]]; then
    error -1 -m 'missing sed commands'
  fi
  SED_ARGS=( -E -n -e "$SED_CMDS" "$SED_FILE" )
  command sed $SED_ARGS
}


#???: get_file_header:
#   Read file comments from file (until first non-comment line).
#   Store resulting lines in 'file_header' array. Empty lines are included.
function get_file_header() {
  local file=$1
  if [[ ! -r $file ]]; then
    error -1 -m 'cannot read file: ${file}.'
  fi
  typeset -g -a file_header
  file_header=( "${(@f)$(command sed -E -n -e '/^[[:blank:]]*([#]|$)/p' -e '/^[^#]/{q;}' <$file)}" )
  return 0
}


#???: list-functions-except <prefix>
# List functions except ... (not implemented)
function list-functions-except() {
  local -a except=( '+' '-' '_' 'prompt_' 'instant_' )
  print -nrC1 -oi -m '[^+-_]*' -- ${(k)functions}
}






##???: [not implemented]
#function watchzsh() {
#  cd $ZDOTDIR/lib
##  for file in $WATCHEXEC
#  
#  for p in $parameters[(I)WATCHEXEC_*]; do
#    file=${(P)p}
#    stat $file
#  done
#    
#  echo $WATCHEXEC_CREATED_PATH , $WATCHEXEC_RENAMED_PATH
#  
#}
#wf() { watchexec "/bin/zsh -c '$(functions watchzsh); watchzsh'"; }
 
#f() { typeset -m "WATCHEXEC*" }
#cd ~zlib
#watchzshfn f






# zparse
# opt, opt+, opt:, opt:-, opt::, opt+:-, opt+::
# +   - all occurrences (only last occurrence without +)
# :   - mandatory argument
# ::  -
# :-  - separate element
function zparse {
  emulate -L zsh
  typeset -A opts
  typeset -a specs=(
    'a'  'b:'  'c:-'  'd::'
    'A+' 'B+:' 'C+:-' 'D+::'
  )
  print -P "%F{1}> before: $(args)%f"
  builtin zparseopts -D -F -M -A opts - $specs || return 2
  typeset -p1 opts
  print -P "%F{2}> after:  $(args)%f"
}


# zparsearr
function zparsearr() {
  emulate -L zsh
  local suffix='+:-'
  typeset -a arr
  builtin zparseopts -D -F -M - '-arg+:-=arr' 'a+:-=-arg' || return 2
  #typeset -a specs=( "-arg${suffix}" "a${suffix}=-arg" )
  #builtin zparseopts -D -F -M -a arr - $specs || return 2
  set -A arr ${arr#--arg}
  typeset -p 1 arr
}



###  Zsh Statistics  ###
function list-zsh-parameter-counts() {
  local -a params=( ${(s.+p:.)$(zmodload -lF zsh/parameter)} )
  local param
  local -A result
  for param in $params; do
    result[$param]="${(P)#param}"
  done
  print -nr -aC2 -- ${(kv)result} | command sort -k1d
}


function list-zsh-options() {
  typeset -a enabled_options disabled_options
  enabled_options=( $(print -nr -aC2 ${(kv)options} | sort -k1 | grep -w -F 'on') )
  disabled_options=( $(print -nr -aC2 ${(kv)options} | sort -k1 | grep -w -F 'off') )
  print -P -nr -aC2 -- '%F{1}'${^disabled_options}'%f' '%F{2}'${^enabled_options}'%f'
}
