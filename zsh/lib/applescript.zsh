#!/bin/zsh

#  applescript.zsh
#  Generated by mkzsh at 07:21pm.
#
#  Created by mpuchkov/506:20 on April 06, 2021.
#  ~/private/zsh/lib/applescript.zsh


#autoload -Uz error


# NAME
#   tell
#
# SYNOPSIS
#   tell <commands>
#
# EXAMPLES
#   tell 'application "System Events"' 'return its properties'
#   tell 'application "Finder"' 'return POSIX path of (insertion location as alias)'
function tell {
  local -a tell_commands=( "tell ${1}" ${(@F)argv:2} "end tell" )
  printf '%s\n' "$(command osascript -s eh <<<${(@F)tell_commands})"
}

# FUNCTION
#   <#name#> <#<args>#>
#
# DESCRIPTION
#   <#Description...#>
function close {
  local what="application \"${1}\""
  command osascript -s eh -e "tell ${what} to quit"
}




## Xcode ##

# FUNCTION
#   xcode-source: Source the document which is currently opened in Xcode.
function xcode-source {
  local xcode_document="$(xcode-document)"
  if [[ $? -eq 0 ]] \
  && [[ -r "$xcode_document" ]]; then
    print -u2 -P -- "%F{3}[sourcing %U${xcode_document}%u]%f"
    source $xcode_document
    [[ $? -eq 0 ]] || print -u2 -P '%1Ferror%f'
  fi
}

# FUNCTION
#   xcode-document: Return path of the document opened in Xcode.
function xcode-document {
  printf '%s\n' "$(tell 'script "Xcode"' 'return get_opened_document_path()')"
}




## System Events ##
# FUNCTION
#   processes
function processes {
  typeset -A opts
  zparseopts -D -F -M -A opts - '-id' 'i=-id'
  if [[ $+opts[--id] -eq 1 ]]; then
    print -nr -C1 -- ${(@s:, :)"$(
      osascript -e 'tell script "System Events" to return get_process_ids()'
    )"} | sort -k1n
  else
    print -oi -nr -C1 -- ${(@s:, :)"$(
      osascript -e 'tell script "System Events" to return get_process_names()'
    )"}
  fi
}
alias psid='processes --id'


function psapps {
  command ps -Ahw -o 'command' \
  | command grep -e '^/Applications' \
  | command cat -n
}






## Google Chrome ##
# Open new window with url.
function chrome_make_new_window() {
  local url="${*// /+}"
  tell 'script "Google Chrome"' 'make_new_window("normal", "'"$url"'")'
}

# Move front tab in a normal window to a new incognito window.
function chrome_move_tab_to_incognito() {
  tell 'script "Google Chrome"' 'move_tab_to_incognito()'
}

# Close chrome windows if more than 'max_windows' windows are opened.
function chrome_limit_windows() {
  local max_windows="${*:-5}"
  tell 'script "Google Chrome"' 'limit_windows('"$max_windows"')'
}




## Aliases ##
alias tell-xcode="tell 'script \"Xcode\"'"
alias tell-chrome="tell 'script \"Google Chrome\"'"
alias tell-sysevents="tell 'script \"System Events\"'"

alias xcs='xcode-source 2>/dev/null'
alias xfd='xcode-document'  # xcode file directory



function add-alias {
  local name value
  vared -p "alias name: "  name
  vared -p "alias value: " value
  command sed -E -n -e "/Recently Added/{p;i\\
alias ${name}=${(qq)value}
;}" < ~/f
}

function clear-recent-apps() {
  osascript <<<'
tell script "System Events"
  toggle_dock_recents()
  toggle_dock_recents()
end tell
'
}
