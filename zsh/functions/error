#!/bin/zsh

#  error
#
#
#  Created by admin on 2020-03-02.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Print an error/warning and its description.
#   * Error - the caller will terminate at an error
#     and return the error code (default code: 1).
#       error -1   'Fatal error'
#       error -127 'Command not found'
#
#   * Warning - the caller will not terminate at a warning
#     and continue without returning any value.
#       warning  'description...'
#       error -0 'description...'
function error() {
    #MARK: - Data
    # Error message label
    typeset program_name='Error'
    # Message
    typeset message
    typeset message_title
    typeset message_desc
    # Exit code
    typeset exit_code=1
    typeset exit_code_label
    # Output
    typeset output_device
    typeset output_color=${error_color:-1}
    # Output options
    typeset autocapitalize='true'
    typeset remove_trailing_space='true'
    typeset trailing_period='true'
    typeset highlight_variables='true'
    
    
    
    
    #MARK: - Functions
    # Highlight all shell '$variables' in description
    function error-replace-variables() {
        # Placeholder label
        typeset undefined_var_label
        undefined_var_label='%F{3}undefined%f'
        # Find and replace variables
        typeset find replace
        find='[$]([{(])?(([A-Za-z_][^ ]*)?[A-Za-z0-9!@#$%^&*=?_])([})])?'
        replace="%F{1}\${\${\2}:-${(%)undefined_var_label}}%f"
        # Highlight variables in description
        
        message_desc=$(/usr/bin/sed -E -e "s/${find}/${replace}/g" <<< "${argv}")
    }
    
    
    
    
    #MARK: Format
    # Title - text, color, and exit code
    function error-format-title() {
        if [[ $exit_code -gt 0 ]]; then
            message_title="%F{$output_color}${program_name}%f"
            exit_trap="return $exit_code;"
        else
            message_title='%F{3}Warning%f'
            exit_trap='-'
        fi
        return 0
    }
    function error-plain-title() {
        unfunction error-format-title
        function error-format-title() { return 0; }
    }
    
    # Description - capitalization, trailing period, highlight
    function error-format-description() {
        message_desc="${message_desc:-No description.}"
        if [[ $autocapitalize == 'true' ]]; then
            message_desc="${(C)message_desc[1]}${${message_desc:1}}"
        fi
        if [[ $remove_trailing_space == 'true' ]]; then
            if [[ $message_desc[-1] == ' ' ]]; then
                message_desc="${message_desc% *}"
            fi
        fi
        if [[ $trailing_period == 'true' ]]; then
            if [[ ! "${(q)message_desc}" =~ $'\n' ]] &&
               [[ ! "${(q)message_desc}" =~ '^.*\.$' ]]; then
                message_desc="${message_desc}."
            fi
        fi
        if [[ $highlight_variables == 'true' ]]; then
            error-replace-variables $message_desc
        fi
        return 0
    }
    function error-plain-description() {
        unfunction error-format-description
        function error-format-description() { return 0; }
    }
    
    # Message - title, description, and return status
    function error-format-message() {
        error-format-title
        error-format-description
        message="%U${message_title}%u${exit_code_label}"
        if [[ -n $message_desc ]]; then
            message="${message}: ${message_desc}"
        else
            message="${message}."
        fi
        return 0
    }
    # Format and print the error/warning message
    function error-print() {
        error-format-message
        redbg $message >&2
        print -P -- "$message" >${output_device:-/dev/stderr} ||
        printf 'QQ<%q>QQ\n\n' "$message"
        return 0
    }
    
    
    
    
    #MARK: - Command Arguments
    # Set program name
    if [[ $0 != 'error' ]]; then
        program_name=$0
    fi
    
    # If the first argument is a digit prefixed by a '-',
    # then 'error -123' is the same as 'error -e 123'
    if [[ $1 =~ '^[-][0-9]+$' ]]; then
        set -- '-e' ${1#-} ${argv:2}
    fi
    
    
    # Parse command arguments
    while [[ $1 =~ '^[-+]' ]] &&
          [[ $1 != '--' ]]; do
        case $1 in
            ## error -h,--help: show help message ##
            -h|--help)
                fn print-commands $0
                return 0
            ;;
            ## error -e: set the exit code ##
            -e)
                local -i code=$2
                exit_code=$code
                shift
            ;;
            ## error -c,--code: display exit code with error message ##
            -c|--code)
                exit_code_label="%f [$exit_code]"
            ;;
            ## error -D,--plain-description: do not format description ##
            -D|--plain-description)
                error-plain-description
            ;;
            ## error -n,--null: try to silence output messages ##
            -n|--null)
                output_device=/dev/null
            ;;
            ## error -u,--usage: set title to 'Usage' ##
            -u|--usage)
                error-plain-title
                error-plain-description
                message_title='%F{4}Usage%f'
            ;;
            ## error -t,--title: set error message title ##
            -t|--title)
                if [[ -n $2 ]]; then
                    error-plain-title
                    message_title="%B%F{$output_color}${2}%f%b"
                    shift
                else
                    break
                fi
            ;;
            
            # Additional formatting options
            ## error -a,--autocapitalize: capitalize first letter ##
            ## error +a,--no-autocapitalize: do not capitalize first letter ##
            -A|--autocapitalize)    autocapitalize='true'    ;;
            +A|--no-autocapitalize) autocapitalize='false'   ;;
            
            ## error -p,--trailing-period: add trailing period ##
            ## error +p,--no-trailing-period: do not add trailing period ##
            -P|--trailing-period)    trailing_period='true'  ;;
            +P|--no-trailing-period) trailing_period='false' ;;
            
            ## error -h,--highlight: enable syntax highlighting ##
            ## error +h,--no-highlight: disable syntax highlighting ##
            -H|--highlight)    highlight_variables='true'    ;;
            +H|--no-highlight) highlight_variables='false'   ;;
            
            # Stop parsing options
            *)  break ;;
        esac
        shift
    done
    [[ $1 == '--' ]] && shift
    
    
    
    
    # Set message description to the remaining arguments
    message_desc="$@"
    error-print && trap "$exit_trap" EXIT
    
    unfunction -m "${0}-*"
    return $exit_code
}
