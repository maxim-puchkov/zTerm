#!/bin/zsh

#  error
#
#
#  Created by admin on 2020-03-02.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Print an error/warning and its description.
#   * Error - the caller will terminate at an error
#     and return the error code (default code: 1).
#       error -1   'Fatal error'
#       error -127 'Command not found'
#
#   * Warning - the caller will not terminate at a warning
#     and continue without returning any value.
#       warning  'description...'
#       error -0 'description...'
function error() {(
    #MARK: - Data
    # Error message
    typeset message
    typeset message_title
    typeset message_desc
    # Exit code
    typeset -i exit_code=1
    typeset exit_code_label
    # Output format options
    typeset -i output_color=${error_color:-1}
    typeset -i output_color_2=${warning_color:-3}
    typeset split_lines='false'
    typeset autocapitalize='true'
    typeset remove_trailing_space='true'
    typeset trailing_period='true'
    typeset highlight_variables='true'
    typeset return_on_exit='true'
    
    
    
    
    #MARK: - Functions
    # Highlight all shell '$variables' in description
    function error-replace-variables() {
        # Find and replace variables
        typeset find replace
        find='[$]([{(])?(([A-Za-z_][^ ]*)?[A-Za-z0-9!@#$%^&*=?_])([})])?'
        replace="%F{1}\${\${\2}:-$text_labels[null]}%f"
        # Highlight variables in description
        message_desc=$(/usr/bin/sed -E -e "s/${find}/${replace}/g" <<< "${argv}")
    }
    
    #MARK: Format
    # Title - text, color, and exit code
    function error-format-title() {
        if [[ $exit_code -ne 0 ]]; then
            message_title="%F{${output_color}}${prog}%f"
        else
            message_title="%F{$output_color_2}${prog}%f"
        fi
        return 0
    }
    function error-plain-title() {
        unset -f error-format-title
        function error-format-title() { return 0; }
    }
    
    # Description - capitalization, trailing period, highlight
    function error-format-description() {
        message_desc="${message_desc:-No description.}"
        [[ $autocapitalize == 'true' ]] &&
            message_desc="${(C)message_desc[1]}${${message_desc:1}}"
#        if [[ $autocapitalize == 'true' ]]; then
#            message_desc="${(C)message_desc[1]}${${message_desc:1}}"
#        fi
        if [[ $remove_trailing_space == 'true' ]]; then
            
            if [[ $message_desc[-1] == ' ' ]]; then
                message_desc="${message_desc% *}"
            fi
        fi
        if [[ $trailing_period == 'true' ]]; then
            if [[ ! "${(q)message_desc}" =~ $'\n' ]] &&
               [[ ! "${(q)message_desc}" =~ '^.*\.$' ]]; then
                message_desc="${message_desc}."
            fi
        fi
        if [[ $highlight_variables == 'true' ]]; then
            error-replace-variables $message_desc
        fi
        return 0
    }
    function error-plain-description() {
        unset -f error-format-description
        function error-format-description() { return 0; }
    }
    
    # Message - title, description, and return status
    function error-format-message() {
        message="${message_title}${exit_code_label}"
        if [[ -n $message_desc ]]; then
            message="${message}: ${message_desc}"
        else
            message="${message}."
        fi
        return 0
    }
    # Format and print the error/warning message
    function error-format() {
        error-format-title
        error-format-description
        error-format-message
#        print -P -- "$message" >&2
        return 0
    }
    
    
    
    
    #MARK: - Command Arguments
    # Treat the very first flag as error code:
    #   'error -123' == 'error -e 123'
    if [[ $1 =~ '^[-][0-9]+$' ]]; then
        set -- '-e' ${1#-} ${argv:2}
    fi
    
    # Parse command arguments
    while [[ $1 =~ '^[-+]' ]] &&
          [[ $1 != '--' ]]; do
        case $1 in
            ## error -h,--help: show help message ##
            -h|--help)
                fn print-commands $0
                return 0
            ;;
            ## error -e: set the exit code ##
            -e) if [[ -n $2 ]] && [[ $2 =~ '^[0-9]+$' ]]; then
                    exit_code=$2
                    shift
                else
                    ( new_code=$2 error -1 'Exit code $new_code is invalid' )
                    return $?
                fi
            ;;
            ## error -c,--code: display exit code with error message ##
            -c|--code)
                exit_code_label="%f [${exit_code}]"
            ;;
            ## error -D,--plain-description: do not format description ##
            -D|--plain-description)
                error-plain-description
            ;;
            ## error -u,--usage: set title to 'Usage' ##
            -u|--usage)
                error-plain-title
                error-plain-description
                message_title='%F{4}Usage%f'
            ;;
            ## error -t,--title: set error message title ##
            -t|--title)
                if [[ -z $2 ]]; then
                    error -1 'Error title is not set'
                fi
                error-plain-title
                message_title="%F{${output_color}}${2}%f"
                shift
            ;;
            
            
            # Additional formatting options
            ## error -S,--split-lines: capitalize first letter ##
            ## error +S,--no-split-lines: do not capitalize first letter ##
            -S|--split-lines)       split_lines='true'      ;;
            +S|--no-split-lines)    split_lines='false'     ;;
            
            ## error -A,--autocapitalize: capitalize first letter ##
            ## error +A,--no-autocapitalize: do not capitalize first letter ##
            -A|--autocapitalize)    autocapitalize='true'    ;;
            +A|--no-autocapitalize) autocapitalize='false'   ;;
            
            ## error -P,--trailing-period: add trailing period ##
            ## error +P,--no-trailing-period: do not add trailing period ##
            -P|--trailing-period)    trailing_period='true'  ;;
            +P|--no-trailing-period) trailing_period='false' ;;
            
            ## error -H,--highlight: enable syntax highlighting ##
            ## error +H,--no-highlight: disable syntax highlighting ##
            -H|--highlight)    highlight_variables='true'    ;;
            +H|--no-highlight) highlight_variables='false'   ;;
            
            [-+]R|--(no-|)return) return_on_exit=$(boolopt $1 'true' 'false') ;;
            
            # Stop parsing options
            *)  break ;;
        esac
        shift
    done
    [[ $1 == '--' ]] && shift
    
    
    # Set display name
    if [[ ! -v prog ]]; then
        prog=${funcstack[2]:-${(C)0}}
    fi
    
    if [[ $exit_code -eq 0 ]]; then
        default prog 'Warning'
    fi
    
    # Set message description to the remaining arguments
    if [[ $split_lines == 'true' ]]; then
        message_desc=${(@F)argv}
    else
        message_desc=${argv}
    fi
    
    # Print and exit
    error-format
    notify -P -- $message >&2
    if [[ $return_on_exit == 'true' ]]; then
        trap 'return '${exit_code}';' EXIT
    fi
    unset -f -m "${0}-*"
    return $exit_code
)}
