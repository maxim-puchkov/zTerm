#!/bin/zsh

#  fn
#  Z-Function
#
#  Created by mpuchkov on 2020-03-12.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Information about shell functions.
function fn() (
    
    ## def: print function definition ##
    function fn_def() {
        local fdef=$( functions $fname )
        local highlight='pygmentize -l zsh'
        if [[ -z ${commands[pygmentize]} ]]; then
            printf 'Cannot find pygments.' >&2
            highlight='cat'
        fi
        printf '%s\n' "$fdef" | ${(z)highlight}
    }
    
    ## src: find function source file ##
    local function fn_src() {
        local fsource=$functions_source[$fname]
        if [[ -z $fsource ]]; then
            error "Definition file not found: '$(Bad $fname)'."
            return 1
        fi
        echo "$fsource"
        return 0
    }
    
    ## isdef: check if a function is defined ##
    function fn_isdef() {
        if [[ ${+functions[$fname]} -ne 1 ]]; then
            return 1
        fi
        return 0
    }
    
    ## sub: list functions defined within a function ##
    function fn_sub() {
        local srcfile
        if ! srcfile=$( fn src $fname ); then
            return 1
        fi
        prefix="${prefix:-${fname%%_*}}"
        list=($( grep -E -o "${prefix}_(\w)+\(\)" $srcfile ))
        for f in $list; do
            local subfname=${f%'()'} # ${${f#${prefix}}%'()'}
            if [[ ${+functions[$subfname]} ]]; then
                printf '%s\n' "$subfname"
            fi
        done
        return 0
    }
    
    ## commands: list function commands ##
    function fn_commands() {
        prefix="${prefix:-${fname%%_*}}"
        local fcommands=(${$( fn -p $prefix sub $fname )//${prefix}_/})
        printf '%s\n' $fcommands
        return 0
    }
    
    ##
    function fn_print-commands() {
        prefix="${prefix:-${fname%%_*}}"
        printf 'Available commands:\n'
        printf "  $(cyan %s)\n" $( fn -p $prefix commands $fname )
        return 0
    }
    
    
    # Options
    typeset -A optlist
    get_options optlist 'p:Ph' "$@" 2>/dev/null
    shift $optlist[length]
    
    prefix="${optlist[p]}"
    
    # Function command
    local cmd=$1
    if [[ $# -eq 0 ]] || [[ -z $cmd ]] || [[ ${optlist[h]} == 'true' ]]; then
        fn print-commands 'fn'
        return 0
    fi
    shift
    
    # Check command name
    if ( ! functions | grep -w -e "fn_$cmd" &> /dev/null ); then
        error "Unknown command: '$(Bad $cmd)'."
        return 127;
    fi
    
    # Command argument
    fname="${@:1}"
    if [[ $# -eq 0 ]]; then
        error 'Function name not specified'
        return 2
    fi
    
    
    if [[ $cmd == 'isdef' ]]; then
        ${0}_${cmd} $fname
        return $?
    fi
    
    # Return if function is not defined
    if [[ ${+functions[$fname]} -eq 0 ]]; then
        error "Function '$(Bad $fname)' is not defined."
        return 1
    fi
    
    # Execute the command
    autoload +X $fname
    ${0}_${cmd} $fname
    return $?
)
