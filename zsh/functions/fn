#!/bin/zsh

#  fn
#  Z-Function
#
#  Created by mpuchkov on 2020-03-12.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Information about shell functions.
function fn() (
    ## def: print function definition ##
    function fn_def() {
        local fdef=$( functions $fname )
        local highlight=(pygmentize -f 'terminal16m' -O style='xcodedark' -l 'zsh')
        if [[ -z ${commands[pygmentize]} ]]; then
            error -0 'Cannot find pygments.'
            highlight='cat'
        fi
        printf '%s\n' "$fdef" | $highlight
    }
    ## src: find function source file ##
    function fn_src() {
        local fsource=$functions_source[$fname]
        if [[ -z $fsource ]]; then
            error "Definition file not found: %F{1}$fname%f."
            return 1
        fi
        echo "$fsource"
        return 0
    }
    ## isdef: check if a function is defined ##
    function fn_isdef() {
        if [[ ${+functions[$fname]} -ne 1 ]]; then
            return 1
        fi
        return 0
    }
    ## sub: list functions defined within a function ##
    function fn_sub() {
        name_prefix="${name_prefix:-${fname%%_*}}"
        typeset srcfile
        if ! srcfile=$( fn src $fname ); then
            return 1
        fi
        typeset -a list
        list=($( egrep --only-matching \
                       --ignore-case \
                       --regexp "${name_prefix}_(\w|\-)+\(\s*\)" -- \
                       $srcfile ))
        typeset f
        for f in $list; do
            typeset subfname=${f%'('*')'}
            if [[ ${+functions[$subfname]} ]]; then
                printf '%s\n' "$subfname"
            fi
        done
        return 0
    }
    ## commands: list function commands ##
    function fn_commands() {
        name_prefix="${name_prefix:-${fname%%_*}}"
        local fcommands=(${$( fn -p $name_prefix sub $fname )//${name_prefix}_/})
        printf '%s\n' $fcommands
        return 0
    }
    ## print-commands: format and list function commands ## [Function]
    function fn_print-commands() {
        name_prefix="${name_prefix:-${fname%%_*}}"
        print_h1 'Commands:'
        print -P -l "%F{14}$( fn -p $name_prefix commands $fname )%f"
        return 0
    }
    
#    function fn_
    
    function fn_completion() {
        # Find files starting with the specified 'fn_name'
        typeset -A reply
        typeset -a fn_files=()
        typeset -a fn_commands=()
        
        # Parse each file and generate associative array 'reply[command]=description'
        typeset fn_dir f cmd
        fn_dir="${$(fn src $fname):h}"
        for f in ${fn_dir}/${fname}*; do
            autoload +X ${f:t}
            fn_commands=($( fn -p ${f:t} commands ${f:t} ))
            for cmd in $fn_commands; do
                local pattern="## ${cmd}: .+ ##.*function ${fname}[\-\_]${cmd}[\s]*\(\)"
                local description=$(
                    greps '-o' "$pattern" "$f" |
                        head -n 1 |
                        sed -e "s/## ${cmd}: //g" -e "s/ ##.*//g"
                )
                
                reply[$cmd]="${description:-''}"
            done
        done
        for k v in ${(kv)reply}; do
          printf '  %s:"%s"\n' "$k" "$v" | colrm
        done
    }
    
    function fn_trace() {
        functions -t 
    }
    
#    ## flag  ##
#    function fn_arguments() {
#        red $0
#    }
#
    
    # Options
    typeset -A optlist
    get_options optlist 'hp:P' "$@" 2>/dev/null
    shift $optlist[length]
    
    typeset show_help name_prefix
    show_help=${optlist[h]}     # -h
    name_prefix=${optlist[p]}   # -p <prefix>
    
    if [[ -n $show_help ]]; then
        fn print-commands $0
        zfc list --short
        return 0
    fi

    case $# in
        0) fn print-commands $0
           return 2 ;;
        1) error 'Function name is not specified.'
           return 2 ;;
    esac
    
    # fn command argument
    typeset cmd=$1
    shift
    if ! ( functions | grep -w -e "fn[-_]$cmd" &>/dev/null ); then
        error "Unknown command: %F{1}$cmd%f."
        return 127
    fi
    
    typeset fname="$@"
    if [[ $cmd == 'isdef' ]]; then
        ${0}_${cmd} $fname
        return $?
    fi
    
    # Return if function is not defined
    if [[ ${+functions[$fname]} -eq 0 ]]; then
        error "Function %F{1}$fname%f is not defined."
        return 1
    fi
    
    # Execute the command
    autoload +X $fname
    ${0}_${cmd} $fname
    return $?
)
