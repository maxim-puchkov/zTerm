#!/bin/zsh

#  fn
#  Z-Function
#
#  Created by mpuchkov on 2020-03-12.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Information about shell functions.
function fn() (
    ## def: print function definition ##
    function fn_def() {
        local fdef=$( functions $fname )
        local highlight=(pygmentize -f 'terminal16m' -O style='xcodedark' -l 'zsh')
        if [[ -z ${commands[pygmentize]} ]]; then
            error 'Cannot find pygments.'
            highlight='cat'
        fi
        printf '%s\n' "$fdef" | $highlight
    }
    ## src: find function source file ##
    function fn_src() {
        local fsource=$functions_source[$fname]
        if [[ -z $fsource ]]; then
            error "Definition file not found: '$(Bad $fname)'."
            return 1
        fi
        echo "$fsource"
        return 0
    }
    ## isdef: check if a function is defined ##
    function fn_isdef() {
        if [[ ${+functions[$fname]} -ne 1 ]]; then
            return 1
        fi
        return 0
    }
    ## sub: list functions defined within a function ##
    function fn_sub() {
        name_prefix="${name_prefix:-${fname%%_*}}"
        typeset srcfile
        if ! srcfile=$( fn src $fname ); then
            return 1
        fi
        typeset -a list
        list=($( egrep --only-matching \
                       --ignore-case \
                       --regexp "${name_prefix}_(\w|\-)+\(\s*\)" -- \
                       $srcfile ))
        typeset f
        for f in $list; do
            typeset subfname=${f%'('*')'}
            if [[ ${+functions[$subfname]} ]]; then
                printf '%s\n' "$subfname"
            fi
        done
        return 0
    }
    ## commands: list function commands ##
    function fn_commands() {
        name_prefix="${name_prefix:-${fname%%_*}}"
        local fcommands=(${$( fn -p $name_prefix sub $fname )//${name_prefix}_/})
        printf '%s\n' $fcommands
        return 0
    }
    ## print-commands: format and list function commands ##
    function fn_print-commands() {
        name_prefix="${name_prefix:-${fname%%_*}}"
#        print -P    '%B%UCommands%u%b:'
        print_h1 'Commands:'
        print -P -l "%F{14}$( fn -p $name_prefix commands $fname )%f"
        return 0
    }
    
    
    # Options
    typeset -A optlist
    get_options optlist 'hp:P' "$@" 2>/dev/null
    shift $optlist[length]
    
    typeset show_help name_prefix
    show_help=${optlist[h]}     # -h
    name_prefix=${optlist[p]}   # -p <prefix>
    
    if [[ -n $show_help ]]; then
        fn print-commands $0
        zfc list --short
        return 0
    fi
    
    case $# in
        0) fn print-commands $0
           return 2 ;;
        1) error 'Function name is not specified.'
           return 2 ;;
    esac

    # Function command
    typeset cmd=$1
    shift
    if ! ( functions | grep -w -e "fn_$cmd" &>/dev/null ); then
        error "Unknown command: %F{1}$cmd%f."
        return 127
    fi
    
    # Command argument
#    if [[ $# -eq 0 ]]; then
#        error 'Function name is not specified.'
#        return 2
#    fi
    
    typeset fname="$@"
    if [[ $cmd == 'isdef' ]]; then
        ${0}_${cmd} $fname
        return $?
    fi
    
    # Return if function is not defined
    if [[ ${+functions[$fname]} -eq 0 ]]; then
        error "Function %F{1}$fname%f is not defined."
        return 1
    fi
    
    # Execute the command
    autoload +X $fname
    ${0}_${cmd} $fname
    return $?
)
