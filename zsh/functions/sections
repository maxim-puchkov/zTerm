#!/bin/zsh

#  sections
#  Z-Function (8)
#
#  Created by Maxim Puchkov on 2020-04-29.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Display only the specified section of a manual page or
# list section titles.
#   sections ls 1   -  display first section of 'ls' manpage.
#   sections -l cd  -  list all sections of 'cd' manpage.
function sections() {
    #MARK: - Functions
    trap 'unfunction -m "sections-*"' EXIT
    # Display indicies and titles of all sections
    # except Name and Synopsis.
    function sections-titles() {
        local titles i start_index end_index
        titles=( ${(QQQ)${(L)sections}#.sh } )
        start_index=$(( 1 + ${#excluded} ))
        end_index=${#sections}
        for i in {$start_index..$end_index}; do
            printf '%3d.   %s\n' $(( $i - ${#excluded} )) "${(C)titles[$i]}"
        done
        return 0
    }
    # Check that index is valid for selected manual page.
    function sections-check-index() {
        local i=$1
        if  [[ $i -lt $(( ${#excluded} - 1 )) ]] ||
            [[ $i -gt $(( ${#sections} - ${#excluded} )) ]]; then
            return 1
        fi
        return 0
    }
    # If the index is undefined, print list of sections and wait
    # for input; offset index to ignore excluded sections.
    function sections-get-index() {
        if [[ -z $index ]]; then
            print -P "'%B%U${(C)manpage_name}%u%b' sections:"
            sections-titles
            print -P "\nChoose manual section to display:  "
            read -r index
        fi
        if  [[ $index =~ '^[^0-9]+' ]] ||
            ( ! sections-check-index $index ); then
            error "Invalid section number '%F{1}${index:-_}%f'."
            return 1
        fi
        index=$(( $index + ${#excluded} ))
        return 0
    }
    
    
    
    
    #MARK: - Options
    typeset -A optlist
    get_options optlist 'l' "$@"
    shift $optlist[length]
    
    
    
    
    #MARK: - Parameters
    # Name of the manual page
    local manpage_name=$1
    if [[ -z $manpage_name ]]; then
        error "Manual page is not specified"
        return 2
    fi
    local manpage=$( /usr/bin/man -w $manpage_name 2>/dev/null )
    if [[ -z $manpage ]]; then
        error "Manual page for '%F{1}$manpage_name%f' does not exist"
        return 1
    fi
    # Index of the section to display
    local index=${2}
    # Indicies of sections that cannot be selected
    local excluded=( 1 2 )
    
    
    
    
    () {
        local tmp="$1"
        # Read section headers
        typeset -a sections=( ${(@f)"$(
            grep --only-matching --ignore-case --text \
                 --regexp '^\.SH.*$' -- $tmp
        )"} )
        sections=(${sections/\//\\/})
        # Option -l: list sections only
        if [[ $optlist[l] ]]; then
            sections-titles
            return 0
        fi
        sections-get-index ||
            return 2
        # Manual title, program name, and synopsis
        local head=( ${${(@f)"$(
            awk "1;/${sections[3]}/{ exit; }" $tmp
        )"}:0:-1} )
        # Selected section text
        local body_begin=${sections[$index]}
        local body_end=${sections[$(( $index + 1 ))]:-NF}
        local body=( ${${(@f)"$(
            awk "/${body_begin}/, /${body_end}/" $tmp
        )"}:0:-1} )
        # Format and display
        printf '%s\n' $head $body |
            /usr/bin/groff -Wall -mtty-char -Tascii -mandoc -c |
                (colored /usr/bin/less || true)
        return 0
    } =( printf '%s\n ' "$(/usr/bin/tbl $manpage)" )
    return $?
}
