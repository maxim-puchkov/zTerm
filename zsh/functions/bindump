#!/bin/zsh

#  bindump
#  Z-Function
#
#  Created by Maxim Puchkov on 2020-04-22.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Display a file or standard input in binary format.
function bindump() {
    function __cleanup() {
        rm -f $1
        return $?
    }
    
    # Get bindump options
    typeset -A optlist
    get_options optlist 'c' "$@"
    shift $optlist[length]

    # If file is not provided, read input until Ctrl+D
    local filepath="$1"
    printf "%s\n" "${filepath:-Standard Input (press Ctrl+D to end)}"
    if [[ -z $filepath ]]; then
        read -d $'\x04' input
        filepath=$( tempfile )
        printf '%s' $input >> $filepath
        echo
        trap "__cleanup $filepath" EXIT
    fi
    echo
    
    if [[ ! -f $filepath ]]; then
        error "The file: '$(Bad $filepath)' does not exist."
        return 2
    fi
    
    # Map hexadecimal 0-F digits to binary 0000-1111
    typeset -A hexbin_map
    local hex_digits=( {0..9} {'A'..'F'} )
    local bin_digits=( {0,1}{0,1}{0,1}{0,1} )
    hexbin_map=( ${hex_digits:^bin_digits} )
    
    # Size of hexadecimal digit groups
    local hexdump=$( printf '%s' $(xxd -p "$filepath") )
    local hex_per_group=2
    local hex_per_row=16
    local pos=0
    # Print each group of hexadecimal characters
    # in binary
    local buffer=$( tempfile )
    trap "__cleanup $buffer" EXIT
    while [[ $pos -lt ${#hexdump} ]]; do
        local group=${hexdump:$pos:$hex_per_group}
        for i in {0..${#hex_per_group}}; do
            local h=${(U)group[$(( i + 1 ))]}
            local binary=${hexbin_map[$h]}
            printf '%0*s' 4 $binary >> $buffer
        done
        pos=$(( $pos + $hex_per_group ))
        case $(( $pos % $hex_per_row )) in
            0)  printf '\n' >> $buffer
                ;;
            *)  printf ' '  >> $buffer
                ;;
        esac
    done
    echo
    
    if [[ $optlist[c] == true ]]; then
        sed -e "s/0/$(grey 0)/g" -e "s/1/$(bold 1)/g" $buffer
    else
        cat $buffer
    fi
    
    return 0
}
