#!/bin/zsh

#  styles
#  zTerm (id: 156)
#
#  Generated by 'zfn' on 2020-11-12
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# styles
#
# By default, function 'styles' sets associative arrays of
# foreground colors, background colors, text effects.
#
# With options, 'styles' can also set style aliases
# and style functions
#
#
# Usage:
# styles [ -[UuVv] -[pefbx] -[aDdMmZz] -[NcC] -[HrR] -[SFBX] ]
#
# Examples:
# `autoload -U styles && styles -UA'
#
# See also:
# oh-my-zsh/lib/spectrum.zsh
emulate -L zsh

typeset PROG="${0##/*}"
typeset ESC=$'\033'

# Unset styles sub-functions on exit.
trap "unset -f -m \"(__)${PROG}_*\"" EXIT



#MARK: - Select Graphic Rendition
# Select Graphic Rendition (SGR) parameters.
# Copied from 'zsh/5.8/share/zsh/functiongs/colors'.
typeset -g -A SGR
SGR=(
    00 none                 # 20 gothic               ## Visual text effects
    01 bold                 # 21 double-underline
    02 faint                  22 normal
    03 italic                 23 no-italic
    04 underline              24 no-underline
    05 blink                  25 no-blink
  # 06 fast-blink           # 26 proportional
    07 standout               27 no-standout
    08 conceal                28 no-conceal
    09 strikethrough          29 no-strikethrough
    
    30 black                  40 bg-black             ## Normal colors
    31 red                    41 bg-red
    32 green                  42 bg-green
    33 yellow                 43 bg-yellow
    34 blue                   44 bg-blue
    35 magenta                45 bg-magenta
    36 cyan                   46 bg-cyan
    37 white                  47 bg-white
  # 38 iso-8316-6           # 48 bg-iso-8316-6
    39 default                49 bg-default
    
    90 Black                 100 bg-Black             ## Bright colors
    91 Red                   101 bg-Red
    92 Green                 102 bg-Green
    93 Yellow                103 bg-Yellow
    94 Blue                  104 bg-Blue
    95 Magenta               105 bg-Magenta
    96 Cyan                  106 bg-Cyan
    97 White                 107 bg-White
)

#???: alias SGR params
typeset -a otherSGR=(
              22 no-bold
  02 dim      22 no-dim
  07 reverse  27 no-reverse
)

# All style function names.
typeset -a all_style_functions
all_style_functions=(
  ${(v)SGR[(I)<30-37>]}              # F: foreground
  ${(v)SGR[(I)<90-97>]}
  ${(v)^SGR[(I)<40-47>]#bg-}'-bg'    # B: background
  ${(v)^SGR[(I)<100-107>]#bg-}'-bg'
  ${(v)SGR[(I)<1-29>]}               # X: effects
)

# All style array names
typeset -a all_styles
all_styles=(
  FG BG FX
  fg bg fx
)









#MARK: - Private Functions
# Enable an option by setting
# its value in 'opts'.
function __styles_setopt() {
  local opt
  for opt; do
    opts[$opt]=""
  done
}

# Set 'fg', 'bg', or 'fx' style functions by
# copying base style function to another
# function with name of an SGR parameter.
# (E.g: red, bg-Black, strikethrough.)
function __styles_setfunction() {
  local style_function="__${PROG}_${1}_style_function"
  shift 1
  local f
  for f; do
    builtin functions -c "$style_function" "$f"
  done
}


#MARK: Base Style Functions
# Print with foreground color.
function __styles_fg_style_function() {
  local -A opts
  local -a specs=( '-stdin' 'I=-stdin' )
  zparseopts -D -M -A opts - $specs || return 1
  if [[ ${+opts[--stdin]} -eq 1 ]] \
  && [[ ! -t 0 || -p /dev/stdin ]]; then
    set -- "$@" "${(@f)$(<&0)}"
  fi
  [[ $# -gt 0 ]] || return 1
  printf "%b" "$fg[${0}]"
  print "$@"
  printf "%b" "$fg[default]"
}

# Print with background color.
function __styles_bg_style_function() {
  local -A opts
  local -a specs=( '-stdin' 'I=-stdin' )
  zparseopts -D -M -A opts - $specs || return 1
  if [[ ${+opts[--stdin]} -eq 1 ]] \
  && [[ ! -t 0 || -p /dev/stdin ]]; then
    set -- "$@" "${(@f)$(<&0)}"
  fi
  [[ $# -gt 0 ]] || return 1
  printf "%b" "$bg[${0%-bg}]"
  print "$@"
  printf "%b" "$bg[default]"
}

# Print with text effects.
function __styles_fx_style_function() {
  local -A opts
  local -a specs=( '-stdin' 'I=-stdin' )
  zparseopts -D -M -A opts - $specs || return 1
  if [[ ${+opts[--stdin]} -eq 1 ]] \
  && [[ ! -t 0 || -p /dev/stdin ]]; then
    set -- "$@" "${(@f)$(<&0)}"
  fi
  [[ $# -gt 0 ]] || return 1
  printf "%b" "$fx[${0}]"
  print "$@"
  printf "%b" "$fx[none]"
}




#MARK: - Options
# @define     option
# @annotation option @opt
#
# Style groups:
#  @opt -p,-P: set prompt escape sequences
#  @opt -e: set literal escape sequences
#  @opt -f: set foreground colors
#  @opt -b: set background colors
#  @opt -x: set visual text effects
#
# Preferences:
#  @opt -U: unset all styles
#  @opt -u: unset changed styles
#  @opt -V: print values of changed styles
#  @opt -v: print names of styles
#
#
# Additional styles:
#  @opt -A: set default additional styles
#
# 256 colors:
#  @opt -N: set 8-bit (256) colors\: -c -C
#  @opt -c: set 8-bit (256) fg colors
#  @opt -C: set 8-bit (256) bg colors
#
# Bright colors:
#  @opt -H: set High intensity (bright) colors\: -r -R
#  @opt -r: set bright fg colors
#  @opt -R: set bright bg colors
#
# Style aliases:
#  @opt -a: set all aliases\: -D -d -M -m -Z -z
#  @opt -D: set aliases FG|BG[-\] for fg|bg[default\]
#  @opt -d: set aliases fg|bg[-\] for fg|bg[default\]
#  @opt -M: set aliases FX[reset,dim,-\] for FX[none,faint,normal\]
#  @opt -m: set aliases fx[reset,dim,-\] for fx[none,faint,normal\]
#  @opt -Z: set aliases FG|BG[0..99\] for FG|BG[000..099\]
#  @opt -z: set aliases fg|bg[0..99\] for FG|BG[000..099\]
#
# Style functions:
#  @opt -S: set all style functions\: -F -B -X
#  @opt -F: set style functions for fg
#  @opt -B: set style functions for bg
#  @opt -X: set style functions for fx
local -A opts
local -a specs
specs=(
  p P=p e     A
  f b x       N c C     a D d M m Z z
  U u V v     H r R     S F B X
)
if ! zparseopts -D -E -F -K -M -A opts - ${specs[@]}; then
  return 1
fi

# If '-A' is set, set default options for additional styles:
# aliases (-a), bright colors (-H), and functions (-S).
if [[ ${+opts[-A]} -eq 1 ]]; then
  __styles_setopt -a -H -S
fi


# List of options which are enabled by other options.
local -a enable_opts=()
case 1 in
  $+opts[-a]) enable_opts+=(-D -d -M -m -Z -z)  ;|  ## -a: alias styles
  $+opts[-H]) enable_opts+=(-r -R)              ;|  ## -H: bright colors
  $+opts[-S]) enable_opts+=(-F -B -X)           ;|  ## -S: style functions
  $+opts[-N]) enable_opts+=(-c -C)              ;|  #  -N: 8-bit colors
  $+opts[-V]) enable_opts+=(-v)                 ;|  #  -V: enable small v
esac
__styles_setopt "${enable_opts[@]}"


if [[ ${+opts[-v]} -eq 1 ]]; then
  print -P -nr -- "Options (%F{blue}${(k)#opts}%f): "
  print -P -r  -- "%F{blue}${(@j:, :)${(@ko)opts}}%f."
fi




#MARK: - Select styles
# Style groups.
local -a foreground background effects
set -A foreground  FG fg
set -A background  BG bg
set -A effects     FX fx

# Choose the specified style arrays.
local -a styles which
case 1 in
  # -p,-e: Add specified escape sequence groups.
  $+opts[-p]) styles+=( ${(M)all_styles[@]:#[A-Z]} )  ;|
  $+opts[-e]) styles+=( ${(M)all_styles[@]:#[a-z]} )  ;|
  # -f,-b,-x: Add specified style groups.
  $+opts[-f]) which+=( ${foreground[@]} )  ;|
  $+opts[-b]) which+=( ${background[@]} )  ;|
  $+opts[-x]) which+=( ${effects[@]} )     ;|
esac

# If neither prompt (-p) nor literal (-e) escape
# sequence group is specified, set all styles.
if [[ ${#styles} -eq 0 ]]; then
  set -A styles ${all_styles[@]}
fi

# Options '-f', '-b', or '-x' restict which styles
# will be set (foreground, background, and text
# effects, respectively).
if [[ ${#which} -gt 0 ]]; then
  set -A styles ${styles:*which}
fi




#MARK: - Unset styles
case 1 in
  # If '-U' is set, all styles and style functions are reset.
  $+opts[-U])
    unset -m -- "${all_styles[@]}"
    unset -m -- "${all_style_functions[@]}"
    # Print verbose output:
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Unset %s styles: %s.\n' \
             -- "%F{blue}ALL%f" "%B%F{blue}${(j:, :)all_styles}%f%b" >&2
      print -Pf 'Unset %s style functions.\n' \
             -- "%F{blue}ALL%f" >&2
    fi
  ;;
  # If '-u' is set, only the changed styles are reset.
  $+opts[-u])
    unset -m -- "${styles[@]}"
    # If '-v' is set, print all changed styles.
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Unset %s styles: %s.\n' \
             -- "%F{blue}${#styles}%f" "%B%F{blue}${(j:, :)styles:-none}%f%b" >&2
    fi
  ;;
esac




#MARK: - Set styles
# Set each selected style.
local style effect code
for style in ${styles[@]}; do
  typeset -g -AH -- $style
  case $style in
    # FG: 256 prompt foreground colors.
    (FG)
      for code in {000..255}; do
        FG[$code]="%{${ESC}[38;5;${code}m%}"
      done
    ;;
    # BG: 256 prompt background colors.
    (BG)
      for code in {000..255}; do
        BG[$code]="%{${ESC}[48;5;${code}m%}"
      done
    ;;
    # FX: prompt visual effects.
    (FX)
      for effect code in ${(@kvOa)SGR[(I)<-29>]}; do
        FX[$effect]="%{${ESC}[${code}m%}"
      done
    ;;
    
    # fg: 8 foreground colors.
    (fg)
      for effect code in ${(@kvOa)SGR[(I)<30-39>]}; do
        fg[$effect]="${ESC}[${code}m"
      done
    ;;
    # bg: 8 background colors.
    (bg)
      for effect code in ${(@kvOa)SGR[(I)<40-49>]}; do
        bg[${effect#bg-}]="${ESC}[${code}m"
      done
    ;;
    # fx: visual effects.
    (fx)
      for effect code in ${(@kvOa)SGR[(I)<-29>]}; do
        fx[$effect]="${ESC}[${code}m"
      done
    ;;
    
    (*) error -1 -m 'bad style: ${style}' ;;
  esac
  
  # If '-V' is set, print style.
  if [[ ${+opts[-V]} -eq 1 ]]; then
    local -a list=()
    print -P -r -- "- Set style %F{4}%B%U${style}%u%b%f:"
    for k v in ${(@Pkv)style}; do
      list+=($'\033[34m'"$k"$'\033[0m \033[2m'"${(qqqq)v}"$'\033[0m')
    done
    print -nr -ac -oi -- ' '${^list[@]}
  fi
done

# If '-v' is set, print all changed styles.
if [[ ${+opts[-v]} -eq 1 ]]; then
  print -Pf 'Set %s styles: %s.\n' \
         -- "%F{blue}${#styles}%f" "%B%F{blue}${(j:, :)styles:-none}%f%b" >&2
fi




#MARK: - Set aliases
local -a style_functions
case 1 in
  # -D: FG,BG[-] = %fg,bg[default]
  $+opts[-D])
    FG[-]="%{${ESC}[39m%}"
    BG[-]="%{${ESC}[49m%}"
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set alias %s=%s: %s.\n' \
             -- "%F{blue}[-]%f" "%F{blue}[default]%f" "%B%F{blue}FG, BG%f%b" >&2
    fi
  ;|
  # -d: fg,bg[-] = fg,bg[default]
  $+opts[-d])
    fg[-]=$fg[default]
    bg[-]=$bg[default]
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set alias %s=%s: %s.\n' \
             -- "%F{blue}[-]%f" "%F{blue}[default]%f" "%B%F{blue}fg, bg%f%b" >&2
    fi
  ;|
  
  # -M: FX[-] = FX[normal]
  $+opts[-M])
    FX[-]=$FX[normal]
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set alias %s=%s: %s.\n' \
             -- "%F{blue}[-]%f" "%F{blue}[normal]%f" "%B%F{blue}FX%f%b" >&2
    fi
  ;|
  # -m: fx[-]: fx[normal]
  $+opts[-m])
    fx[-]=$fx[normal]
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set alias %s=%s: %s.\n' \
             -- "%F{blue}[-]%f" "%F{blue}[normal]%f" "%B%F{blue}fx%f%b" >&2
    fi
  ;|
  
  # -Z: FG,BG[0..99] = [000..099]
  $+opts[-Z])
    for code in {0..99}; do
      local -iZ3 c="$code"
      FG[$code]=$FG[$c]
      BG[$code]=$BG[$c]
    done
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set aliases %s=%s: %s.\n' \
             -- "%F{blue}[00..99]%f" "%F{blue}[000..099]%f" "%B%F{blue}FG, BG%f%b" >&2
    fi
  ;|
  # -z: fg,bg[0..99] = [000..099]
  $+opts[-z])
    for code in {0..99}; do
      local -iZ3 c="$code"
      fg[$code]=${(%)FG[$c]}
      bg[$code]=${(%)BG[$c]}
    done
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set aliases %s=%s: %s.\n' \
             -- "%F{blue}[00..99]%f" "%F{blue}[000..099]%f" "%B%F{blue}fg, bg%f%b" >&2
    fi
  ;|
esac




case 1 in
  #MARK: - Set additional colors
  # -H: all bright colors (-r, -R).
  ## -r: bright foreground colors.
  $+opts[-r])
    for effect code in ${(@kvOa)SGR[(I)<90-97>]}; do
      fg[$effect]="${ESC}[${code}m"
    done
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set %s bright colors: %s.\n' \
             -- "%F{blue}${#SGR[(I)<90-97>]}%f" "%B%F{blue}fg%f%b"
    fi
  ;|
  ## -R: bright background colors.
  $+opts[-R])
    for effect code in ${(@kvOa)SGR[(I)<100-107>]#bg-}; do
      bg[$effect]="${ESC}[${code}m"
    done
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set %s bright colors: %s.\n' \
             -- "%F{blue}${#SGR[(I)<100-107>]}%f" "%B%F{blue}bg%f%b"
    fi
  ;|
  
  # -N: fg,bg 000..255 colors (-c, -C).
  ## -c: fg[000..255] = FG[000..255]
  $+opts[-c])
    for code in {000..255}; do
      fg[$code]=${(%)FG[$code]}
    done
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set 256 colors: %s.\n' "%B%F{blue}fg%f%b"
    fi
  ;|
  ## -C: bg[000..255] = BG[000..255]
  $+opts[-C])
    for code in {000..255}; do
      bg[$code]=${(%)BG[$code]}
    done
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set 256 colors: %s.\n' "%B%F{blue}bg%f%b"
    fi
  ;|
  
  
  
  #MARK: - Set style functions
  # -S: all style functions (-F, -B, -X).
  ## -F: set foreground style functions (red, green, ...).
  $+opts[-F])
    # Functions: red, green, ..., Red, Green, etc.
    set -A style_functions "${(@k)fg:#(default|[^[:alpha:]]*)}"
    __styles_setfunction 'fg' "${style_functions[@]}"
    # Print verbose output:
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set %s style functions: %s.\n' \
             -- "%F{blue}${#style_functions}%f" "%B%F{blue}fg%f%b" >&2
    fi
    if [[ ${+opts[-V]} -eq 1 ]]; then
      print -P -nr -aC2 -- "  %F{blue}${^style_functions[@]}%f"
    fi
  ;|
  
  # -B: set background style functions (red-bg, green-bg, ...).
  $+opts[-B])
    # Functions for 'bg': red-bg, green-bg, ..., Red-bg, Green-bg, etc.
    set -A style_functions "${(@k)^bg:#(default|[^[:alpha:]]*)}-bg"
    __styles_setfunction 'bg' "${style_functions[@]}"
    # Print verbose output:
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set %s style functions: %s.\n' \
             -- "%F{blue}${#style_functions}%f" "%B%F{blue}bg%f%b" >&2
    fi
    if [[ ${+opts[-V]} -eq 1 ]]; then
      print -P -nr -aC2 -- "  %F{blue}${^style_functions[@]}%f"
    fi
  ;|
  
  # -X: set effect style functions.
  $+opts[-X])
    # Functions: [no-]bold, [no-]underline, [no-]italic, etc.
    set -A style_functions "${(@k)fx:#([^[:alpha:]]*|none|reset|normal)}"
    __styles_setfunction 'fx' "${style_functions[@]}"
    # Print verbose output:
    if [[ ${+opts[-v]} -eq 1 ]]; then
      print -Pf 'Set %s style functions: %s.\n' \
             -- "%F{blue}${#style_functions}%f" "%B%F{blue}fx%f%b" >&2
    fi
    if [[ ${+opts[-V]} -eq 1 ]]; then
      print -P -nr -aC2 -- "  %F{blue}${^style_functions[@]}%f"
    fi
  ;|
esac

return 0
