#!/bin/zsh

#  esc
#  Z-Function (88)
#
#  Created by Maxim Puchkov on 2020-07-07.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# esc - print ANSI escape sequences and text.
function esc() {(
  if [[ $# -eq 0 ]]; then
    return 2
  fi
  
  setopt extendedglob
  set -- ${argv:gs/','/';'}
  local output_format='%b'
  local ansi_code
  local -i last
  local -a reset_seq
  local new_line='\n'
  
  while [[ -n $1 ]]; do
    case $1 in
      # Do not print new line
      (-n)
        new_line=''
        shift
      ;;
      # Append 0 to reset_seq
      (-0)
        reset_seq+=(0)
        shift
      ;;
      # Append a sequnce to reset_seq
      (-r|--reset_seq)
        reset_seq+=(${2:?})
        shift 2
      ;;
      
      
      # Print text
      (-s|-t|--text)
        printf '%s' "${2:=}"
        shift 2
      ;;
      # Print quoted text
      (-q)
        printf '%q' "${2:=}"
        shift 2
      ;;
      # Print ANSI color
      ([0-9][0-9\;]#)
        let -i last=${(u)argv[(i)[^0-9]*]}-1
        ansi_code="\e[${(j.;.)${(@u)argv[1,$last]}}m"
        if [[ $output_format == '%s' ]]; then
          printf "\$'%s'" "$ansi_code"
        else
          printf '%b' "$ansi_code"
        fi
        shift $last
      ;;
      
      
      # Output interpreted escape sequences (default)
      (-e)
        output_format='%b'
        shift
      ;;
      # Output string escape sequences
      (-p)
        output_format='%s'
        shift
      ;;
      
      
      # Stop processing options at one or more dashes
      # and print remaining arguments as string
      (-##)
        shift
        printf '%s' "$argv"
        break
      ;;
      (*)
        printf 'Bad ANSI color code: %s\n' "$1" >&2
        shift
      ;;
    esac
  done
  
  if [[ -n $reset_seq ]]; then
    printf $output_format "\e[${(j.;.)${(u)reset_seq}}m"
  fi
  printf '%b' "$new_line"
  return 0
)}
