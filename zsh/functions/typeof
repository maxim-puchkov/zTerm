#!/bin/zsh

#  typeof
#  Z-Function (71)
#
#  Created by Maxim Puchkov on 2020-06-21.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# typeof - print the type of a shell parameter
function typeof() {
  # Set options
  typeset -i verbose=0 quiet=0 hide_errors=0
  while [[ $1 =~ '^[-]' ]]; do
    case $1 in
      (-v|--verbose) let verbose=1  ;;
      (-q|--quiet) let quiet=1  ;;
      (-e|--hide-errors) let hide_errors=1 ;;
      (--) shift; break  ;;
    esac
    shift
  done
  
  
  # Print function usage if no parameter names are specified
  if [[ $# -eq 0 ]]; then
    autoload -Uz usage
    local function_name="$0"
    usage 'Specify at least one name.' - \
          '${function_name} [name...]'
    return 1
  fi
  
  
  # Set default exit code
  typeset -i exit_code=0
  # Set default label for undefined parameters
  typeset undefined=$'\e[33m''parameter not set'$'\e[0m'
  # Output file descriptor number (default: 1)
  typeset -i outfd
  
  # For each parameter name
  local parameter_name parameter_type
  for parameter_name; do
    # Determine parameter type
    parameter_type="${${(t)${(P)parameter_name}}:-$undefined}"
    # Set output file descriptor to 1 (stdout). If parameter
    # is undefined, set to 2 (stderr) instead.
    let outfd=1
    if [[ "$parameter_type" == "$undefined" ]]; then
      let exit_code=$exit_code+1
      if [[ $hide_errors -eq 1 ]]; then
        continue
      fi
      let outfd=2
    fi
    if [[ $quiet -eq 1 ]]; then
      continue
    fi
    # If verbose option is set, parameter name is also printed
    if [[ $verbose -eq 1 ]]; then
      print -nr -u $outfd -- "${parameter_name}: "
    fi
    # Print parameter type
    print -r -u $outfd -- "${parameter_type}"
  done
  
  return $exit_code
}

#
## <#Function description#>
#function typeof() {(
#    if [[ $# -eq 0 ]]; then
#        error -1 'No input.'
#        return 1
#    fi
#    typeset var_{id,type}
#    for var_id in $argv; do
#        if [[ ! -v $var_id ]]; then
#            warning 'variable ${var_id} is not set.'
#            continue
#        fi
#        var_type=${(Pt)var_id}
#        builtin print -- "$var_id" "$var_type"
#    done
#    return 0
#)}
