#!/bin/zsh

#  letters
#  Z-Function (52)
#
#  Created by Maxim Puchkov on 2020-06-02.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Print/find/order English alphabet letters.
function letters() {
    # Print all letters
    #   'letters'
    function letters_alphabet() {
        typeset -a az
        set -A az $(print -C2 -- '%B'{1..26}'%b' '%F{4}'{A..Z}'%f')
        print -c -P -- ${az}
    }
    
    # Print letter index or value
    #   'letters 1'  ~>  A
    #   'letters Z'  ~>  26
    function letters_position() {
        local arg=$1
        local value=''
        if [[ $arg =~ '^[0-9]+$' ]]; then
            value=${A[$arg]}
        else
            value=${A[(i)$arg]}
        fi
        if [[ -z $value ]]; then
            error -1 'Invalid argument: $arg.'
        fi
        print -- $value
    }
    
    # Show relative positions of alphabet letters
    #   'letters A Z'
    function letters_relative() {
        typeset -a A=({A..Z})
        typeset -a N=({1..26})
        typeset letter=${1[1]:-L}
        typeset compare_to=${2[1]}
        typeset index=${A[(wi)$letter]}
        if [[ $index -gt ${#A} ]]; then
            return 1
        fi
        A[$index]="%B%F{9}$A[$index]%f%b"
        N[$index]="%B%F{9}$N[$index]%f%b"
        typeset index2=${A[(wi)$compare_to]}
        A[$index2]="%B%F{4}$A[$index2]%f%b"
        N[$index2]="%B%F{4}$N[$index2]%f%b"
        { print -P -- ${A:0:13}
        print -P -- ${N:0:13} } | column -t
        
        { print -P -- ${A:13:13}
        print -P -- ${N:13:13}
        echo } | column -t
    }
    
    # Order letters alphabetically:
    #   'letters c b a'  ~>  a b c
    function letters_order() {
        local ordered=(${(ou)argv})
        print -P -- "Ordered: %F{10}${(j:%f, %F\{10\}:)ordered}%f."
        print -P -- "First: %B${ordered[1]}%b, last: %B${ordered[-1]}%b."
        return 0
    }
    
    
    
    set -- ${(uU)argv}
    case $# in
        (0)     letters_alphabet ;;
        (1)     letters_position $1 ;;
        (2)     letters_relative $1 $2 ;;
        (<3->)  letters_order $argv ;;
    esac
    return $?
}
