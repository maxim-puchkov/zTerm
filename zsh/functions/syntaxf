#!/bin/zsh

#  syntaxf
#  Z-Function (70)
#
#  Created by Maxim Puchkov on 2020-06-21.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Format syntax
function syntaxf() {(
    typeset -i replace_color=4
    if [[ $1 == '-c' ]]; then
        replace_color=$2
        shift 2
    fi
    typeset find replace
    find='\$\{((\(.+\))?([[:alnum:]]+)(:.+)?)\}'
    replace='${\1:-"'$(esc 4 31)'\1'$(esc 0)'"}'
    REPLY=$(/usr/bin/sed -E -e 's/'$find'/'$replace'/g' <<< "$argv")
    print -- "$REPLY"

#    sed -E -e 's/\$\{(.+)\}/${\1:-'$NULL'}/g
#    find='[$]([{(])?(([A-Za-z_][^ ]*)?[A-Za-z0-9!@#$%^&*=?_])([})])?'
#    replace='%F{'$replace_color'}${${\2}:-'$text_labels[null]'}%f'
#    /usr/bin/sed -E -e 's/'$find'/'$replace'/g' <<< "$argv"
    return 0
)}



























#function syntaxf() {
##    typeset -A optlist
##    get-arguments -A optlist -o 'c' -- $argv
##    # Highlight color
##    typeset output_color=$logf_color
##    if [[ -n $optlist[-c] ]]; then
##        output_color=$optlist[-c]
##    fi
##    # Placeholder label
#
#
##    function
#    typeset -A optlist
#    get-arguments -A optlist -o c:4 -- $argv
#
#
#    local k v
#    for k v in ${(kv)optlist}; do
#        if [[ $k =~ '^[-]' ]]; then
#            k=${k#-}
#        fi
#        print -- "$k is set to $v"
#    done
#
#    return 0
#
#
##    print-var optlist @
#
#
#
##    typeset undefined_label=${(%):-%F{3}undefined%f}
#    # Find and replace variables
##    typeset find replace
##    find='[$]([{])?(([A-Za-z_\(][^ ]*)?[A-Za-z0-9!@#$%^&*=?_\)])([}])?'
##    replace="%U%F{${output_color}}\${\${\2}:-${undefined_label}}%f%u"
##    echo $argv
#
#    # Highlight variables in description
##    sed -E -e "s/$find/$replace/g" <<< "${argv}"
#    function format() {
#        typeset undefined_label=${(%):-%F{3}undefined%f}
#        typeset find='[$]([{])?(([A-Za-z_\(][^ ]*)?[A-Za-z0-9!@#$%^&*=?_\)])([}])?'
#        typeset replace="%U%F{${output_color}}\${\${\2}:-${undefined_label}}%f%u"
#        /usr/bin/sed -E -e "s/${find}/${replace}/g" <$1
#    }
#    #<(printf '%s' "$argv")
#
#    syntax=$(format <(printf '%s' "$argv"))
#    print -P -- "'$syntax'"
#}
#
##

##
