#!/bin/zsh

#  syntaxf
#  @zsh-function (zfn70)
#
#  Created by Maxim Puchkov on 2020-06-21.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# syntaxf
#
# Highlight values of ${parameters} in text. If ${parameter}
# value is null, substitute 'null' string. Parameters that
# are not enclosed in curly braces are not affected.
#
# Usage:
# syntaxf <args>
emulate -LR zsh




# Function options.
# @define     option
# @annotation option @opt
#
# @opt -c,--color   Make output colored.
# @opt -s,--stdin   Read arguments from standard input.
# @opt -e,--expand  Perform single-word shell expansions.
# @opt -n,--name    Print name of null parameters.
local -A opts
local -a specs altspecs
specs=('-stdin' '-expand' '-color' '-name')
altspecs=('s=-stdin' 'e=-expand' 'c=-color' 'n=-name')
if [[ $# -gt 0 ]] &&
   {! zparseopts -D -K -M -A opts - $specs $altspecs}; then
  return 1
fi


# If '--stdin' is set, append input to arguments.
if [[ ${+opts[--stdin]} -eq 1 ]] &&
   [[ -p /dev/stdin || ! -t 0 ]]; then
  local -a syntaxf_input
  set   -A syntaxf_input ${(@f)"$(<&0)"}
  set -- $argv $syntaxf_input
fi




# Styles for substituted text.
local -A styles
# --color: set text styles.
if [[ ${+opts[--color]} -eq 1 ]]; then
  styles=(
    [value]=$'\e[4;37m' [no-value]=$'\e[31m'
    [name]=$'\e[2;31m'  [reset]=$'\e[0m'
  )
fi
# Substituted text.
local param_value="$styles[value]\$\2$styles[reset]"
local param_name="$styles[name]\2:$styles[reset]"
local param_null="$styles[no-value]null$styles[reset]"


# --name: print parameter name if it null.
if [[ ${+opts[--name]} -eq 1 ]]; then
  param_null="${param_name}${param_null}"
fi




# Find: ${...}
local find='(^|[^\])[$][{]([^}]+)[}]'
# Replace with: ${${...:+$...}:-null(...)}
local replace="\1\${\${\2:+$param_value}:-$param_null}"
# Substitute all parameters: '${...}' --> '${${...:+$...}:-null(...)}'
local reply=$(/usr/bin/sed -E -e "s#${find}#${replace}#g" <<<"$*")


# -e,--expand
if [[ ${+opts[--expand]} -eq 1 ]]; then
  reply="${(e)reply}"
fi




printf '%s\n' "$reply"
return $?









# Examples:
# 1. Unerline parameters HOME and USER in variable 'original_text'
#    and store the result in 'formatted_text':
#        - typeset original_text='${HOME} dir of ${USER}'
#        - typeset formatted_text=$(syntaxf $original_text)
#    Result:
#          "${${HOME:+${HOME}}:-null(HOME)} dir of ${${USER:+${USER}}:-null(USER)}"
#    Print the formatted text:
#        - print -P -- $formatted_text
#        - print -- ${(e)formatted_text}
#
# 2. Underline parameter SHLVL, do not format parameter SHELL,
#    and print "null" for invalid parameter USR in 'text':
#       - typeset text='${SHLVL} $SHELL ${USR}'
#    Result:
#         "${${SHLVL:+${SHLVL}}:-null} $SHELL ${${USR:+${USR}}:-null}"

# Replacements for set and unset parameters.
#local value="$styles[value]"'${\2}'"$styles[reset]"
#local no_value="$styles[no-value]"'null'"$styles[name]\(\2\)$styles[reset]"
#local replace='\1${${\2:+'$value'}:-'$no_value'}'
