#!/bin/zsh

#  print-array
#  Z-Function
#
#  Created by Maxim Puchkov on 2020-04-17.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Format and print array indicies and values.
# Output formats:
#    -l: {
#          [x]=1
#          [y]=2
#        }
#    -1: {  [x]=1, [y]=2  }
function print-array() {(
    # Choose multi- or single-line output
    typeset out_format='list'
    case $1 in
        -l|--list) out_format='list'; shift ;;
        -1|--line) out_format='line'; shift ;;
    esac
    # If $1 is set, print array with name $1;
    # or combine arguments into an array
    if [[ ! -v $1 ]]; then
        typeset tmp_array_type='-a'
        if [[ $1 == '--' ]]; then
            shift
        else
            if [[ $1 == '-A' ]]; then
                tmp_array_type=$1
                shift
            fi
        fi
        typeset $tmp_array_type tmp_array
        set -A tmp_array $argv
        set -- tmp_array
    fi
    # Print all [index]=value pairs on one line
    function print-array_line() {
        print -P -- "$lbrace" "${(@j:,  :)list}" "$rbrace"
    }
    # Print one [index]=value pair per line
    function print-array_list() {
        print -Pl -- "$lbrace" "  ${(@j:,\n  :s:\n:)list}" "$rbrace"
    }
    
    

    
    # Set colors and styles
    typeset index_color
    typeset {l,r}brace
    lbrace=$(bold '{')
    rbrace=$(bold '}')
    
    # Array to print
    typeset id=$1
    case ${(Pt)id} in
        (*'association'*) index_color='%F{2}' ;;
              (*'array'*) index_color='%F{4}' ;;
                      (*) error -1 'not an array: $id.' ;;
    esac
    
    # Append [index]=value pairs to a list
    typeset -a list
    for value in ${(Pv)id}; do
        index=${(k)${(P)id}[(r)$value]}
        list+=("[${index_color}${index}%f]='%U${value}%u'")
    done
    
    ${0}_${out_format}
    return 0
)}
