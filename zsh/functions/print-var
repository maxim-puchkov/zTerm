#!/bin/zsh

#  print-var
#  Z-Function (57)
#
#  Created by Maxim Puchkov on 2020-06-06.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.




# Function print-var:
#   Show type, length, value of shell variables.
#
# Options:
## print-var -t:    print variable types only
## print-var -b:    brief output
## print-var -m:    select all variables matching pattern
function print-var() {
    # Exclude duplicates, rename '@' to 'argv'
    set -- ${(u)argv:/@/argv}
    
    
    # Get options
    typeset -A optlist
    autoload -Uz get-arguments
    get-arguments -A optlist --flags t h m 1 -- $argv
    # Return if variable name is not given
    typeset -i argc=$#
    if [[ $argc -eq 0 ]]; then
        error -1 'Enter at least one variable name.'
        return 1
    fi
   
   
    # Trap function to display variable in
    # the environment of the caller
    trap '(
        export prog='$0'
        # Set constant values
        typeset {null,undefined,join,array_join}=""
        null=${text_labels[null]:-null}
        undefined=${text_labels[undefined]:-undefined}
        join="%u, %U"
        
        o_oneline="'$optlist[-1]'"
        o_typeof="'$optlist[-t]'"
        o_hideval="'$optlist[-h]'"
        o_match="'$optlist[-m]'"
        
        if [[ $o_match -eq 1 ]]; then
            typeset -a matches
            matches=($(typeset +m "$argv"))
            if [[ -z $matches ]]; then
                error -1 "No matches found for $argv."
            fi
            set -- $matches
        fi
        
        # Loop for every variable ID
        typeset var_id=""
        for var_id in '"$argv"'; do
            # Check that variable is set
            if [[ ! -v $var_id ]]; then
                error -1 "Variable \$var_id is not set."
                continue
            fi
            
            
            # Format variable description
            typeset {type,length,description,name_format,__desc}=""
            type=${(Pt)var_id}
            length=${(P)#var_id}
            name_format="%F{2}${var_id}%f"
            
            
            # Print only variable types (-t)
            if [[ $o_typeof -eq 1 ]]; then
                print -P -- "${name_format}: $type"
                continue
            fi
            # Print variable descriptions without values (-h)
            description="(%Btype%b: ${type:-$undefined}, %Blength%b: ${length:-0})"
            __desc="${name_format}${description}"
            if [[ $o_hideval -eq 1 ]]; then
                print -P -- "${__desc}"
                continue
            fi
            
            
            # Format variable value based on its type
            typeset __value=""
            if [[ -z ${(P)var_id} ]]; then
                __value="${null}"
            else
                unset __value
                case $type in
                    # Arrays: [key/index] = value
                    (*"association"*)
                        __value=$(print-array ${o_oneline:+-1} -A  ${(Pkv)var_id})
                    ;;
                    (*"array"*)
                        __value=$(print-array ${o_oneline:+-1} -- ${(P)var_id})
                    ;;
                    # Number: value
                    (*("integer"|"float")*)
                        __value="%U${(P)var_id}%u"
                    ;;
                    # Other: "value"
                    *)
                        __value="\"%U${(P)var_id}%u\""
                    ;;
                esac
            fi
            
            # Print variable
            print -P -- "${__desc} = ${__value}"
        done
    )' EXIT
    
    return $?
}
