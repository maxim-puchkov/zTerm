#!/bin/zsh

#  print-var
#  /usr/local/zterm/zsh/functions (id: 85)
#
#  Generated by 'ztemplate' (zterm/zsh/sources) on 2020-10-15
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# print-var
# :show:
#
# Print shell variables.
#
# Usage:
# print-var [name]
emulate -LR zsh
autoload -Uz error

local var_{name,value} k v


# get-longest-key
# :print-var:
#
# Print the longest key in an associative array.
# If --length flag is set, print length of the
# longest key instead.
function get-longest-key() {
  local -A opts
  zparseopts -D -E -K -M -A opts - -length l=-length
  local cmd='print line;'
  if [[ ${+opts[--length]} -eq 1 ]]; then
    cmd='print length(line);'
  fi
  print -nr -C1 -- ${(Pk)1} |
  /usr/bin/awk '
    (length > maxlength) {
      maxlength = length;
      line = $0;
    }
    END {
      '"$cmd"'
    }'
  return 0
}



while [[ -n "$1" ]]; do
  if [[ ! -v $1 ]]; then
    error -1 -m 'parameter ${1} is not set'
  fi
  local -a result=()
  local -i width="($(get-longest-key --length $1) + 8)"
  local -R $width var_index
  print -Pn -- "%F{6}${(Pt)1} %U${1}%u%f[${(Pkq)#1}] = "
  case ${(Pt)1} in
    # association[length] = {
    #   [key] = "value"
    #   ...
    # }
    (*association*)
      print -- "{"
      for k v in ${(Pkvq)1}; do
        var_index="[${(Q)k}]  ="
        var_value="\"${(Q)v}\""
        result+=("$var_index" "$var_value")
      done
      print -nr -aC2 -- ${(@)result}
      print -- "}"
    ;;
    
    # array[length] = {
    #   [1] = "value"
    #   ...
    # }
    (*array*)
      print -- "{"
      local -i i=1
      for v in ${(Pq)1}; do
        var_index="[${i}]  ="
        var_value="\"${(Q)v}\""
        result+=("$var_index" "$var_value")
        let i="$i + 1"
      done
      print -nr -aC2 -- ${(@)result}
      print -- "}"
    ;;
    
    # scalar[length] = "value"
    (*scalar*)
      result+="\"${(P)1}\""
      print -r -- "${result}"
    ;;
    
    # parameter[length] = value
    (*)
      result+="${(P)1}"
      print -r -- "${result}"
    ;;
  esac
  shift
done

return 0
