#!/bin/zsh

#  Cryptography
#  
#
#  Created by mpuchkov on 2020-01-28.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.

arr="${MAGENTA}=====>${NORMAL}"

# PRG
function print_PRG() {
    local n=$1 # {0,1}^n
    local I=$(( $( bc <<< "2^$n" ) - 1 ))
    for i in {0..$I}; do
        local binary=$( bc <<< "obase=2;$i" )
        local bitstring=$( printf "%04d" $binary )
        print -n "${CYAN}$i.${NORMAL} "
        print -n $(python $devx_fpath/py/G.py $bitstring)
        print " (seed: ${CYAN}${bitstring}${NORMAL})"
    done
}

function Compute_PRG() {
    local bitstring=$( printf "%04d" ${1//[^0-1]/} )
    local g=$( python $devx_fpath/py/G.py $bitstring )
    print "$g"
}

function PRG() {
    local bitstring=$( printf "%04d" ${1//[^0-1]/} )
    local g=$( Compute_PRG $bitstring )
    print "G(${CYAN}${bitstring}${NORMAL}) = ${CYAN}${g}${NORMAL}"
}

function PRG_prime() {
    local bitstring=$( printf "%04d" ${1//[^0-1]/} )
    local g=$( Compute_PRG $bitstring )
    local g_prime="$g$g"
    local arg="${CYAN}${bitstring}${NORMAL}"
    print "$arr Computation:"
    print -C 2 "G'($arg)" "= G($arg) || G($arg)"
    print -C 2 "G($arg)\t" "= $g"
    print "$arr Result: "
    print -C 2 "G'($arg)\t"  "= ${CYAN}${g_prime}${NORMAL}"
}

function PRG2_prime() {
    local bitstring_1="${$( printf "%04d" ${1} )//[^0-1]/}"
    local bitstring_2="${$( printf "%04d" ${2} )//[^0-1]/}"
    local arg_1="${CYAN}${bitstring_1}${NORMAL}"
    local arg_2="${GREEN}${bitstring_2}${NORMAL}"
    local g1="${CYAN}$( Compute_PRG $bitstring_1 )${NORMAL}"
    local g2="${GREEN}$( Compute_PRG $bitstring_2 )${NORMAL}"
    local g_prime="$g1$g2"
    print "$arr Computation:"
    print -C 2 "G'($arg_1, $arg_2)\t" "= G($arg_1) || G($arg_2)"
    print -C 2 "G($arg_1)\t\t" "= $g1"
    print -C 2 "G($arg_2)\t\t" "= $g2"
    print "$arr Result: "
    print -C 2 "G'($arg_1, $arg_2)\t" "= ${g_prime}"
}
