#!/bin/zsh

#  zfc
#  Z-Function
#
#  Created by Maxim Puchkov on 2020-04-23.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# View or edit local zsh functions.
function zfc() {
    function __find() {
        local fdir="$1"
        local fname=$2
        if [[ -z $fdir ]] || [[ -z $fname ]]; then
            echo "$(Info __find): Function directory or function name is not defined."
            return 1
        fi
        f=$( find "$fdir" -name "$fname" )
        if [[ -z "$f" ]]; then
            echo "$(Info __find): Function '$(Bad $fname)' not found."
            return 1
        fi
        echo "$f"
        return 0
    }
    
    
    ## dir: go to z-functions directory [default] ##
    function zfc_dir() {
        cdp -- $zfunc
        return $?
    }
    
    ## find: find Z-Function definition file ##
    function zfc_find() {
        local fname=$1
        if [[ -z $fname ]]; then
            return 2
        fi
        f=$( find $ZTERM -name $fname )
        if [[ -z "$f" ]]; then
            error "Function '$(Bad $fname)' not found."
            return 1
        fi
        echo "$f"
        return 0
    }
    
    ## localfunction: make a Z-Function local ##
    function zfc_localfunction() {
        local fname=$1
        # Find disabled function
        f=$( __find "$zsitefunc" "$fname" )
        if [[ $? -ne 0 ]]; then
            error "Function '$(Bad $fname)' is not a site function."
            return 1
        fi
        # Move function to an autoloaded directory
        mv "$f" "$zfunc/"
        echo "$(OK 'OK'): '$(bold $fname)' is now a local function."
        return 0
    }
    
    ## sitefunction: make a Z-Function accessible to all scripts ##
    function zfc_sitefunction() {
        local fname=$1
        # Find an enabled function
        f=$( __find "$zfunc" "$fname" )
        if [[ $? -ne 0 ]]; then
            error "Function '$(Bad $fname)' is not a site function."
            return 1
        fi
        # Move function to 'zsh/function/disabled'
        mv "$f" "$zsitefunc/"
        echo "$(OK 'OK'): '$(bold $fname)' is now a site function."
        return 0
    }
    
    ## enable: enable a Z-Function ##
    function zfc_enable() {
        local fname=$1
        # Find disabled function
        f=$( __find "$zdisabled" "$fname" )
        if [[ $? -ne 0 ]]; then
            error "Function '$(Bad $fname)' is not disabled."
            return 1
        fi
        # Move function to an autoloaded directory
        mv "$f" "$zfunc/"
        echo "$(OK 'OK'): enabled '$(bold $fname)'."
        return 0
    }
    
    ## disable: disable a Z-Function ##
    function zfc_disable() {
        local fname=$1
        # Find an enabled function
        f=$( __find "$zfunc" "$fname" )
        if [[ $? -ne 0 ]]; then
            error "Function '$(Bad $fname)' is not enabled."
            return 1
        fi
        # Move function to 'zsh/function/disabled'
        mv "$f" "$zdisabled/"
        echo "$(OK 'OK'): disabled '$(bold $fname)'."
        return 0
    }
    
    ## statfull: list all enabled and disabled Z-Functions ##
    function zfc_statfull() {
        # Display enabled functions
        b_greenbg 'STANDARD'
        print -C 4 ${$( find $zfunc -type f ):t}
        echo
        b_greenbg 'SITE'
        print -C 4 ${$( find $zsitefunc -type f ):t}
        echo
        # Display disabled functions.
        b_redbg 'DISABLED'
        print -C 4 ${(o)$( find $zdisabled -type f ):t}
        echo
    }
    
    ## stat: display number of enabled and disabled Z-Functions ##
    function zfc_stat() {
        local -R5 n_standard n_site n_disabled n_total
        n_standard=${#$( printf '%s\n' $zfunc/* )}
        n_site=${#$( printf '%s\n' $zsitefunc/* )}
        n_disabled=${#$( printf '%s\n' $zdisabled/* )}
        n_total=$(( $n_standard + $n_disabled ))
        print_h1   ' Z-Functions '
        print -C 2 'Standard: ' ${n_standard}
        print -C 2 'Site:     ' ${n_site}
        print -C 2 'Disabled: ' ${n_disabled}
        print -C 2 'Total:    ' ${n_total}
    }
    
    ## open: open function source code in Xcode ##
    function zfc_open() {
        local fname=$1
        local files=(${(@f)"$(
            find $ZTERM -name $fname -type f
        )"})
        if [[ ${#files} -ne 1 ]]; then
            error "Found ${#files} matching functions."
            return 1
        fi
        open -a Xcode $files
        return $?
    }
    
    
    # Options
    typeset -A optlist
    get_options optlist 'h' "$@" # 2>/dev/null
    shift $optlist[length]
    
    # Show help
    if [[ -n $optlist[h] ]]; then
        fn print-commands $0
        return 0
    fi
    
    local cmd=$1
    case $# in
        0)  cmd='dir' ;;
        1)  if ( ! fn isdef ${0}_${1} ); then
                cmd='open'
            else
                shift
            fi ;;
        *)  shift ;;
    esac
    
    # Execute a zfc command
    if ! ( fn isdef ${0}_${cmd} ); then
        error "Unknown command: %F{1}$cmd%f."
        return 127
    fi
    ${0}_${cmd} "$@"
    return $?
}
