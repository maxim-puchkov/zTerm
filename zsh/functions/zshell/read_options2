#!/bin/zsh

#  read_options2
#  Z-Shell
#
#  Created by admin on 2020-02-25.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Read options and output an array associating
# option name to its value.
function read_options2() {
    setopt noerrreturn
    
    # Increment length of option string.
    function length++() {
        length=$(( length + 1 ))
    }
    
    
    # Result array and length of options.
    typeset -A result
    local length=0
    local keywords_opts=(${(z)1})
    shift
    redbg $keywords_opts
    bluebg $keyword_opt;
    # Iterate over all positional parameters and save
    # options to result array.
    while [[ $1 =~ "^-" ]]; do
        if [[ $1 == "--" ]] || [[ ${keywords_opts[(wi)$optname]} -gt ${#keywords_opts} ]]; then
            length++
            break
        fi
        
        local optname=${1//-}
        local optvalue='set'
        
        # Set option value to value of next parameter if
        #   it does not begin with a dash.
        # Otherwise, set option value to 'set'.
        is_option=$( printf '%s' "$2" | grep -E '[\-]{1,2}[[:alnum:]]*' -o )
        if [[ -n $2 && -z $is_option ]]; then
            optvalue=$2
            optvalue=${optvalue//-}
            optvalue=${optvalue// /_}
            length++
            shift
        fi
        
        # If option's value is not set, associate
        # option name with its value.
        if [[ ! -v $result[$optname] ]]; then
            result[$optname]=$optvalue
        fi
        length++
        shift
    done
    
    # Set shift length to skip parsed options.
    result[shift_distance]=$length
    
    # Error: Failed to read options.
    if [[ ${#result} -eq 0 ]]; then
        return 1
    fi
    
    # OK: Print keys and values of option array.
    echo ${(kv)result}
    return 0
}




#MARK: - Examples
# 1. Input '--delete --account "John"'
#
#   typeset -A opts
#   set -A opts $( read_options "$@" )
#   echo $opts[delete]         # Outputs 'set'
#   echo $opts[account]        # Outputs 'John'

# 2. Input '--f1 --f2 --f3 -- command'
#
#   opts[f1]=set, opts[f2]=set, opts[f3]=set


# Regex meaning:
#   ^-      Dash symbol "-" at start of string "^".
#   ^[^-]   Any symbol except dash "[^-]" at start of string "^".
