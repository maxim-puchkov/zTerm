#!/bin/zsh

#  template
#  Documents & Support
#
#  Created by admin on 2020-03-04.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Generate files from templates.
# Synopsis:
#   template [options...] kind
function template() {
    # Generate unique suffixes for files which
    # already exist in Output directory.
    #   E.g.: file, file-2, ..., file-N.
    function generate_filename() {
        # Output file.
        name="$1"
        local base=${name:r:t}
        if [[ -z $name ]]; then
            return 1
        fi
        # Count all files starting with the same 'base' name.
        local count=$( files count "$target_dir" "$base" )
        # If there exists a file with a similar name,
        # save new file with appended file number.
        local suffix=''
        if [[ $count -ge 1 ]]; then
            local file_number=$(( $count + 1 ))
            suffix="-$file_number"
        fi
        # Append file extension if necessary.
        local ext=''
        if [[ -n ${name:e} ]]; then
            ext=".${name:e}"
        fi
        # Print generated name.
        local new_name="${base}${suffix}${ext}"
        echo $new_name
    }
    
    # Replace ___MACRO___ strings.
    function substitute_macros() {
        local file=$1
        if [[ ! -e $file ]]; then
            return 1
        fi
        shift
        local macro macro_id macro_value
        for macro in "$@"; do
            macro_id="___${(U)macro#'m_'}___"
            macro_value=${(P)macro}
            sed -i '' "s/$macro_id/$macro_value/g" $file
        done
    }
    
    # Copy template file to the target directory and
    # replace macro strings.
    function copy_template() {
        # If test run is enabled, then only
        # print the filenames of
        typeset test_run=${optlist[t]}
        if [[ -n $test_run ]]; then
            print -P -- "TestRun $0 [$$]: "\
                        "orig[$template_orig] --> "\
                        "New[%F{2}$template_new%f]."
            return 0
        fi
        
        # Copy the original template file.
        if ! ( cp -n $template_orig $template_new ); then
            error 'Fatal error.'
            return 1
        fi
        # Substitute template macro strings.
        substitute_macros "$template_new" $TEMPLATE_MACROS
        print -P -- "Generated template file: %F{2}$template_new%f."
        print -P -- ""
        echo $m_template_id > $savefile
        return 0
    }
    
    
    #MARK: - Z-Shell Command Template
    function template_zsh() {
        target_dir="${target_dir:-${PWD}}"
        name="${$( generate_filename ${1:-${(U)0}} )}"
        m_filename=$name
        m_package_name='zsh'
        template_new="${target_dir}/${name}"
        template_orig="$TEMPLATES_DIR/$0"
        
        copy_template
    }
    
    #MARK: - Z-Shell Function
    function template_zfunction() {
        target_dir="${target_dir:-${zfunc}}"
        name="${$( generate_filename $1 ):-${(U)0}}"
        m_filename=$name
        m_package_name='Z-Function'
        template_new="${target_dir}/${name}"
        template_orig="$TEMPLATES_DIR/$0"
        
        copy_template
    }
    
#    #MARK: - Z-Shell Command Function
#    function template_zcmdfunction() {
#        target_dir="${target_dir:-${zfunc}}"
#        name="${$( generate_filename $1 ):-${(U)0}}"
#        local package='Z-Function'
#        template_new="${target_dir}/${name}"
#        template_orig="$TEMPLATES_DIR/$0"
#        
#        copy_template
#    }
    
    #MARK: - Python Script
    function template_python() {
        target_dir="${target_dir:-${PWD}}"
        name="${$( generate_filename ${1:-${(U)0}} )}"
        m_filename=$name
        m_package_name='Python'
        template_new="${target_dir}/${name}"
        template_orig="$TEMPLATES_DIR/$0.py"
        m_shebang='#!\/usr\/bin\/env\ python3'
        if (copy_template); then
            chmod a+x $template_new
        fi
    }
    
    #MARK: - Z-Shell Completion
    function template_zcompletion() {
        target_dir="${target_dir:-${ZDOTDIR}/completions}"
        name="${$( generate_filename _${1:-${(U)0}} )}"
        m_filename=$name
        m_package_name='zsh completion'
        template_new="${target_dir}/${name}"
        template_orig=$( tempfile )
        
        zfc completion "$1" > "$template_orig"
        copy_template
        rm -f "$template_orig"
    }
    
    #MARK: - Z-Shell Tools
    function template_ztool() {
        target_dir="${target_dir:-${ZTERM}/Tools}"
        name="${$( generate_filename ${1:-${(U)0}} )}"
        m_filename=$name
        m_package_name='Terminal'
        template_new="${target_dir}/${name}"
        template_orig="$TEMPLATES_DIR/$0"
        if (copy_template); then
            chmod a+x $template_new
        fi
    }
    
    #MARK: - launchd service
    function template_launchd() {
        target_dir="${target_dir:-${ZTERM}/etc/$1}"
        mkdir $target_dir
        name="${$( generate_filename ${m_organization_id}.services.${1:-${(U)0}} )}.plist"
        m_filename=$name
        m_package_name='Services'
        template_new="${target_dir}/${name}"
        template_orig="$TEMPLATES_DIR/$0"
        copy_template
        
        template -d $ZTERM/Services ztool $1
        ln -s  $ZTERM/etc/$1/$name  $HOME/Library/LaunchAgents/$name
        ln -s  $ZTERM/Services/$1   /usr/local/bin/$1
    }
    
    
    
    if [[ $# -eq 0 ]]; then
        fn print-commands 'template'
        return 2
    fi
    
    local savefile="$zterm/etc/template.id"
    local lastid=0
#    read_array lastid $savefile &>/dev/null
    lastid=$(< $savefile)
    
    function getid() {
        lastid=${${optlist[t]:+test-id$$}:-$(< $TEMPLATE_ID)}
    }
    function setid() {
        
    }
    
    # Template macro strings.
    typeset -a TEMPLATE_MACROS=(
        m_shebang   m_template_ts  m_filename   m_package_name     m_owner
        m_username  m_date_full    m_date_year  m_organization_id  m_template_id
    )
    local m_shebang   m_template_ts  m_filename   m_package_name     m_owner \
          m_username  m_date_full    m_date_year  m_organization_id  m_template_id
    m_shebang='#!\/bin\/zsh'
    m_template_ts='<#timestamp#>'
    m_filename="<#name#>"
    m_package_name="<#package#>"
    m_owner='Maxim Puchkov'
    m_username='Maxim Puchkov'
    m_date_full=$( date +'%Y-%m-%d' )
    m_date_year=$( date +'%Y' )
    m_organization_id='com.maximpuchkov'
    m_template_id=( $(( $lastid + 1 )) )
    
    export TEMPLATE_MACROS
    export TEMPLATES_DIR="$ZDOTDIR/templates"
    
    # Function options.
    typeset -A optlist
    get_options optlist 'd:Dt' "$@"
    shift $optlist[length]
    
    # Source and compound commands.
    local src cmd
    src=$( basename $0 )
    cmd=$1
    
    local name template_new template_orig target_dir
    
    # Template output directory (-d).
    target_dir=${optlist[d]:a}
    if [[ -n "$target_dir" ]] && [[ ! -d "$target_dir" ]]; then
        error "Invalid directory: '$target_dir'"
        return 2
    fi
    if [[ $optlist[t] ]]; then
        m_template_id='No ID'
    fi
    
    # Compound command.
    case $cmd in
        "")
            print "Usage:"
            print -x2 "\t$(b_bcyan $src) $(cyan 'command') $(cyan 'arguments')... - call command '$src command' with a list of 'arguments'."
            ;;
        *)
            shift
            ${src}_${cmd} "$@"
            local ecode=$?
            if [ $ecode = 127 ]; then
                echo "Unknown command: $(Bad $cmd) (Exit code $ecode)." >&2
            fi
            ;;
    esac
    return $ecode
}
