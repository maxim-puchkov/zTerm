# User-specific functions for interactive zsh(1) shells.


# Open default macOS Terminal.
function term1() {
    open -g '/System/Applications/Utilities/Terminal.app'
}
# Open iTerm2.
function term2() {
    open -g '/Applications/iTerm.app'
}

# Open in editor.
function edit() {
    $EDITOR "$@"
}



#MARK: - Oh-my-zsh Plugins
# Open oh-my-zsh root directory.
function myzsh() {
    open "$ZSH"
}
# Open oh-my-zsh/plugins.
function myplugins() {
    open "$ZSH/plugins"
}
# List plugins.
function list-plugins() {
    ls "$ZSH/plugins"
}
# Display information about an oh-my-zsh plugin.
function info-plugin() {
    local plugin_name="$1"
    open -a Xcode -g "$ZSH/plugins/$plugin_name/README"*
}
# Print plugin's README to stdout.
function cat-plugin() {
    local plugin_name="$1"
    cat "$ZSH/plugins/$plugin_name/README"*
}
# View next plugin's.
function next-plugin() {
    # Array of all plugin
    local all_plugins=($( command ls -1 "$ZSH/plugins" ))
    read_array arr
    # Seen/unseen plugins
    local seen=( $arr )
    local notseen=( ${all_plugins:|seen} )
    # Exit if seen all
    if [[ ${#notseen} -eq 0 ]]; then
        echo "<<< $(b_greenbg 'ALL PLUGINS SEEN') >>>"
        return 1
    fi
    # Next plugin is the first unseen
    local next=${notseen[1]}
    arr+=( $next )
    save_array arr
    # Sizes
    local N=${#all_plugins}
    local n=$(( ${#seen} + 1 ))
    echo "Opening plugin $( b_magenta "#${n} - $next"  ) out of ${N} total."
    info-plugin $next
}


#MARK: - Oh-my-zsh Themes
# List themes.
function list-themes() {
    local themes=(${$( command ls "$ZSH/themes" )%.zsh-theme})
    echo $themes
}
# View next theme.
function next-theme() {
    # All themes
    local themes=($( list-themes ))
    # Tried themes
    touch "$DEV/Library/Data/tried_themes.array"
    typeset -a tried_themes
    read_array tried_themes
    # Not tried themes
    local not_tried_themes=( ${themes:|tried_themes} )
    if [[ ${#not_tried_themes} -eq 0 ]]; then
        echo "<<< $(b_greenbg 'ALL THEMES TRIED') >>>"
        return 1
    fi
    # Pick first theme which has not been tried yet
    local next=${not_tried_themes[1]}
    tried_themes+=( $next )
    save_array tried_themes
    export ZSH_THEME=$next
    re "Current theme: $next"
}









#MARK: - File Directories
# Go to Z-Terminal root directory.
function zterm() {
    cdp "$zterm"
}
# Go to Z-Functions root directory.
function zfuncdir() {
    cdp "$zfunc"
}

# Go to SFU Spring 2020 directory.
function sfudir() {
    cdp "$SFU_TERM"
}


function pygments-styles() {
    local list=($( pygmentize -L 'styles' ))
    printf '%s' "$list" | grep -E '\* [[:alnum:]-]*' -o | sed -E 's/\* //g'
}



# Go to Desktop.
function desk()     { cdp "${(q)HOME}/Desktop/${(q)@}"; }
# Go to Development root.
function dev()      { cdp "${(q)DEV}/${@}"; }
# Go to Library.
function lib()      { cdp "${(q)lib}/${@}"; }
# Go to Temporary Files.
function temp()     { cdp "${(q)tempdir}/${@}"; }
# Go to Test Files.
function testdir()  { cdp "${(q)testdir}/${@}"; }
# Go to local var.
function var()      { cdp "${(q)HOME}/var/${(q)@}"; }

function serv()     { cdp "${(q)HOME}/Library/LaunchAgents/${(q)@}"; }


# Pass/Fail symbols.
function pass() {
    printf '%s\n' "$(b_green '✔︎')"
    return 0
}
function fail() {
    printf '%s\n' "$(b_bred '✘')"
    return 1
}



# Hex print.
function hexpr() {
    printf '%s' $(xxd -p "${@:?}")
}
function hexprl() {
    echo ${#$(hexpr "$@")}
}
function hexprline() {
    echo $(hexpr "$@")
}


# Upposecase.
function uc() {
    printf '%s' "${(U)@}"
}
# Remove whitespaces.
function nosp() {
    printf '%s' "${@// /}"
}

# Z-Cmd-Function
# date
function date_list_formats() {
    typeset -ag formats
    formats=()
    man strftime |
        colcrt - |
        fgrep -- '%' |
        awk '{ print $1 }' |
        while read fmt; do
            if [[ $fmt[1] == '%' ]]; then
                formats+=($fmt);
            fi
        done
    print -a -C 8 ${formats}
}
function date_formats_preview() {
    for format in $( date_list_formats ); do
        local full_command="\$( $(green "date -j +\'$format\'") )"
        local preview="$(blue ${(qq)$( date -j +"$format" )})"
        print -a -C2 "${format}\t ${full_command}\t" "${preview}"
    done
}


function magnetize() {
    open /Applications/Magnet.app -g
    local positions=('← Left ◧' '→ Right ◨' '↑ Up ⬒ ' '↓ Down ⬓')
    local group1=("⇧⌘"${^positions})
    printf "$(underline %s):\n" 'Magnet Commands'
    for cmd in $group1; do
        printf '%-*s' 35 "$(bold $cmd)"
    done
    echo
    
    #'Top Left ◰' 'Top Right ◳'
    #'Bottom Left ◱' 'Bottom Right ◲'
#    for cmd in $group2; do
#        printf '%-*s' 35 "$(bold $cmd)"
#    done
}

function letters() {
    typeset -ag A
    typeset -ag N
    
    A=({A..Z})
    N=({1..26})
    local letter=${1[1]:-L}
    local compareTo=${2[1]}
    
    
    local index=${A[(wi)$letter]}
    if [[ $index -gt ${#A} ]]; then
        return 1
    fi
    A[$index]=$(b_bred $A[$index])
    N[$index]=$(b_bred $N[$index])
    
    
    local index2=${A[(wi)$compareTo]}
    A[$index2]=$(blue $A[$index2])
    N[$index2]=$(blue $N[$index2])
    
    {{ printf '  %s' $A; echo
        printf '%s ' $N; echo } |
        column -t }
}
