#!/bin/zsh

#  Utility Functions
#  /usr/local/zterm/zsh (id: 8)
#
#  Generated by 'ztemplate_apply' (zterm/zsh/sources) on 2020-10-10
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# tldr
#
# Combine 'tldr' and 'tealdeer' programs.
function tldr() {
  print-line 'tldr';     /usr/local/bin/tldr $argv;
  printf '\n'
  print-line 'tealdeer'; /usr/local/bin/tealdeer $argv
}
compdef '_tealdeer'  tldr


# hgrep, hegrep, hfgrep
#
# Grep with background color.
function hgrep hegrep hfgrep() {
  GREP_COLOR="$HGREP_COLOR" \
    ${0#h} --color='always' $argv
}
compdef '_grep'  hgrep hegrep hfgrep












# src
#
# Display the source code of a command or function.
#
# Usage:
# src [name]
function src() {
  local -a files
  local name file {fn,cmd}_src
  for name; do
    # Source files
    files=()
    # Function source
    fn_src=$functions_source[$name]
    if [[ -r $fn_src ]]; then
      files+=($fn_src)
    fi
    # Command source
    cmd_src=$comamnds[$name]
    if [[ -r $cmd_src ]]; then
      files+=($cmd_src)
    fi
    
    for file in $files; do
      if [[ -t 0 ]] || [[ -p /dev/stdout ]]; then
        cat $file
      else
        # Highlight files
        highlight $file
      fi
    done
  done
}




# zspec
function zspec() {
  local -i zspec_{append_all,optional_arg,merge,flag}
  while [[ "$1" =~ ^[-] ]]; do
    case "$1" in
      (-a|--all)      let zspec_append_all=1 ;;
      (-o|--optional) let zspec_optional_arg=1 ;;
      (-m|--merge)    let zspec_merge=1 ;;
      (-f|--flag)     let zspec_flag=1 ;;
      (*) error -1 -m 'bad option: ${1}' ;;
    esac
    shift
  done
  [[ ! -v 1 ]] && error -1 -m 'option name not specified'
  
  local spec=$1
  [[ $zspec_append_all -eq 1 ]] && spec+='+'
  if [[ $zspec_flag -ne 1 ]]; then
    spec+=':'
    [[ $zspec_merge        -eq 1 ]] && spec+='-'
    [[ $zspec_optional_arg -eq 1 ]] && spec+=':'
  fi
  printf '%s\n' "$spec"
  return 0
}




# plist-add
function plist-add() {
  local plist=${1:?Property List file is not set}
  local keypath=${2:?Keypath is not set}
  local type=${3:?Keypath type is not set}
  /usr/libexec/PlistBuddy -c "Add :${keypath#:} ${type}" $plist
}

# plist-geneopts
function plist-genopts() {
  local -i i count #???:
  plist-add $plist "Options" "array"
  for i in {1..$count}; do
    plist-add $plist "Options:" "dict"
    plist-add $plist "Options:${i}"
  done
}
