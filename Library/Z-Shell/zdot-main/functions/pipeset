#!/bin/zsh

#  pipeset
#  /usr/local/zterm/zsh/functions (id: 37)
#
#  Generated by 'ztemplate_apply' (zterm/zsh/sources) on 2020-10-12
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# pipeset
#
#
# Usage:
# pipeset
emulate -LR zsh
setopt extendedglob


#@define arg *: :_typeset


# Pipeset options
## -o: output set parameters in form of calls to typeset ##
local -A opts
zparseopts -D -E -K -M -A opts - o
# Check if there is an '-a' or '-A' option.
local -a typeset_opts
zparseopts -E -a typeset_opts - A a


# Get standard or piped input
if [[   -p /dev/stdin ]] ||
   [[ ! -t 0 ]]; then
  local -a pipeset_input
  set   -A pipeset_input "${(@f)$(<&0)}"
fi




# Append pipeset_input after typeset's options and arguments.
if [[ -n "$pipeset_input" ]]; then
  if [[ ${#typeset_opts} -gt 0 ]]; then
  
    # Arrays
    if [[ "$argv" =~ '=\(' ]]; then
      # echo Z | pipeset -a arr1='(' X Y ')'   -> array[3] arr1=(x y Z)
      set -- "${argv%')'} ${(@qqq)pipeset_input} )"
    else
      # echo "X\nY" | pipeset -a arr2          -> array[2] arr2=(X Y)
      set -- "${argv}=( ${(@qqq)pipeset_input} )"
    fi
    
  else
    
    # Scalars
    if [[ "$argv" =~ "=" ]]; then
      # echo "X\nY" | pipeset var3             -> scalar[3] var3="X Y"
      set -- "${argv}${pipeset_input}"
    else
      # echo Z | pipeset var4="xy"             -> scalar[3] var4="xyZ"
      set -- "${argv}=\"${pipeset_input}\""
    fi
    
  fi
fi


# Identifier (name) of the set parameter.
local id="${${*%%=*}##* }"

# Unset parameter before assignment.
#unset $id

# Set parameter value.
eval "typeset -g $argv"
if [[ ${+opts[-o]} -eq 1 ]]; then
  typeset -p -m "$id"
fi


[[ -v $id ]]
return $?
