#!/bin/zsh


# ztemplate
#
# Generate template files by combining specified
# components (e.g., header and options).
#
# Template files are stored in directory:
# ~zterm/Library/Z-Shell/sources/ztemplate.
#
# Usage:
# ztemplate [--out path] [--<macro> value] [make] [[-...]<template> ...]
# ztemplate help
# ztemplate edit
emulate -LR zsh
setopt extendedglob

autoload -Uz setarray error

typeset PROG="${0##*/}"




# ztemplate files.
local ztemplate_dir="/usr/local/zterm/share/ztemplate"
local ztemplate_id_file="/usr/local/zterm/var/data/template-id"
if [[ ! -d $ztemplate_dir ]]; then
  error -1 -m 'directory does not exist: ${ztemplate_dir}'
fi

# List of template file names.
local -a templates_list=( "$ztemplate_dir/Templates/"**(.,@N:t:r) )
local margin='  '
local filename template_{name,file,ext}

# Template text macros.
local macro_pattern='___[A-Z0-9]*___'
local -A ztemplate_macros
setarray -A ztemplate_macros "$ztemplate_dir/Macros/ztemplate_macros.var"




# Function options.
# @define option
# @define command 1
# @define arg     *: :( $ZTERMDIR/share/ztemplate/Templates/*(:t:r) )
# @annotation option @opt
#
# @opt -o,--out: Output file path.
# @opt --filename 1
# @opt --project 2
local -A opts
opts=( ${(kv)ztemplate_macros} )
local -a specs
specs=( ${(k)^opts#-}':' '-out:' 'o:=-out' )
if [[ $# -gt 0 ]] &&
   {! zparseopts -D -K -M -A opts - $specs}; then
  return 1
fi


# Output to standard output or to the specified file.
local output_file
if [[ ${+opts[--out]} -eq 1 ]]; then
  output_file="${opts[--out]:P}"
  opts[--filename]="${${output_file:t}##[^[:alnum:]]##}"
fi







# @command make
# @description Make new file with templates.
function ztemplate_make() {
  if [[ $# -eq 0 ]]; then
    error -1 -m 'not enough arguments'
  fi
  #### ztemplate_apply ####
  # Generate substitution commands.
  local -a substitutions
  local id value macro{,_{name,value}}
  # Convert options to array of type 's/___MACRO_ID___/macro value/g'.
  for id value in ${(kvq)opts}; do
    macro_name="___${${(QU)id#--}//[ \-]/_}___"
    macro_value="${${(Qe)value}//\//\\/}"
    # Move compound macros to the beginning and
    # simple macros to the end of the array.
    if [[ "$macro_value" =~ ${~macro_pattern} ]]; then
      substitutions=('s/'"${macro_name}"'/'"${macro_value}"'/g' $substitutions)
    else
      substitutions=($substitutions 's/'"${macro_name}"'/'"${macro_value}"'/g')
    fi
  done
  
  
  #### ztemplte_make ####
  () {
    local tmp_file=$1
    shift
    
    template_ext=".${PROG}"
    for template_name; do
      print -r -- "${template_name%$template_ext}${template_ext}" |
      /usr/bin/sed -e 's/^[-]*//'                                 |
      builtin read -r filename
      
      template_file="${ztemplate_dir}/Templates/${filename}"
      if [[ ! -e $template_file ]]; then
        error -1 -m 'template does not exist: ${template_name}'
      fi
      /bin/cat -- "$template_file"
    done |
    #???:    for ... | perl >... && {...}     -
    /usr/bin/perl -pe "${(j:; :)substitutions}" >$tmp_file && {
      # Update id
      local -i id
      builtin read -r id <$ztemplate_id_file
      printf '%i\n' $(( id + 1 )) >|$ztemplate_id_file
    }
    
    if [[ ${+opts[--out]} -eq 1 ]]; then
      /bin/cp -i $tmp_file $output_file
      if [[ ${+opts[--mode]} -eq 1 ]]; then
        /bin/chmod ${opts[--mode]} $output_file
      fi
    else
      /bin/cat -- "$tmp_file"
    fi
    return $?
  } =() $argv
}


# @command       help
# @description   List all available templates.
function ztemplate_help() {
  print -P -- "%BAvailable templates%b:"
  print -P -nr -c -- "%F{6}${margin}-${(@)^templates_list}%f"
  return 0
}


# @command      edit
# @description  Edit template files or default text macros.
function ztemplate_edit() {
  if [[ -z "$1" ]]; then
    error -1 -m 'what do you want to edit: templates or macros?'
  fi
  local -a files=()
  
  local what=$1
  shift
  
  case $what in
    templates)
      local edit_all='all'
      if [[ $# -eq 0 ]]; then
        error -1 -m 'specify template file names or enter ${edit_all} to edit all files'
      fi
      
      local pattern
      case $argv in
        ($edit_all) pattern="" ;;
        (*) pattern="${(j:|:)argv}" ;;
      esac
      
      local dir="$ztemplate_dir/Templates"
      files=( ${dir}/(${~pattern})**(N) )
      if [[ ${#files} -eq 0 ]]; then
        error -1 -m 'no templates files in ${dir} match pattern ${pattern}'
      fi
      
      # Print
      print -P -- "%BEditing template files%b:"
      print -P -oi -nr -C1 -- "%F{6}${margin}${(@)^files:t:r}%f" |
      /bin/cat -n
    ;;
    
    macros)
      files=($ztemplate_dir/Macros/ztemplate_macros.var)
    ;;
    
    *)
      error -1 -m 'invalid argument: ${what}'
    ;;
  esac
  
  /usr/bin/open -a Xcode -- $files
  return $?
}




# If arguments were provided but the first argument
# is not a subcommand, do 'make' (for compatibility
# with old ztemplate).
if [[ "$1" =~ ^[-] ]]; then
  set -- 'make' $argv
fi
# If the subcommand is 'edit' and the second argument
# is not specified, do 'edit macros'
if [[ "$1" == 'edit' ]] &&
   [[ -z "$2" ]]; then
  set -- $1 'macros'
fi
# If arguments were not provided, do 'help'.
if [[ $# -eq 0 ]]; then
  set -- 'help'
fi


# Set ztemplate subcommand.
local subcommand=$1
if [[ ${+functions[${PROG}_${subcommand}]} -eq 0 ]]; then
  error -127 -m 'no such command: ${subcommand}'
fi
shift


${PROG}_${subcommand} ${argv}
return $?
