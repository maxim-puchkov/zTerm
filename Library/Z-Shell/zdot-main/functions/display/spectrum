#!/bin/zsh

#  spectrum
#  zTerm (id: 49)
#
#  Generated by 'zfn' on 2020-10-22
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# spectrum
#
# Set associative arrays of foreground colors,
# background colors, text effects, and style
# aliases.
#
#
# Usage:
# spectrum [ -[UuVv] -[pe] -[fbx] -[cDdHMmZz] -[FBX] ]
#
# Examples:
# `autoload -Uz spectrum && spectrum'
#
# See also:
# oh-my-zsh/lib/spectrum.zsh
emulate -LR zsh
autoload -U colors && colors


typeset PROG="${0##/*}"
typeset E=$'\033'




#MARK: - Options
# @define     option
# @annotation option @opt
#
# @opt -U: unset all styles
# @opt -u: unset changed styles
# @opt -v: list names of changed styles
# @opt -V: print changed styles
#
# @opt -p: set prompt escape sequences
# @opt -e: set literal escape sequences
# @opt -f: set foreground colors
# @opt -b: set background colors
# @opt -x: set visual text effects
if [[ $# -eq 0 ]]; then
  set -- -pe -fbx
fi
# @opt -H: set bright fg,bg colors
# @opt -c: set 256 fg,bg colors
# @opt -D: set aliases FG|BG[-\] for fg|bg[default\]
# @opt -d: set aliases fg|bg[-\] for fg|bg[default\]
# @opt -M: set alias FX[-\] for fx[normal\]
# @opt -m: set alias fx[-\] for fx[normal\]
# @opt -Z: set aliases FG|BG[0..99\] for FG|BG[000..099\]
# @opt -z: set aliases fg|bg[0..99\] for FG|BG[000..099\]


#!!!: @opt -F: set style functions for fg
#!!!: @opt -B: set style functions for bg
#!!!: @opt -X: set style functions for fx
local -A opts
local -a specs
set -A specs U u V v p e f b x  F B X  H c D d M m Z z
if ! zparseopts -D -E -F -K -M -A opts - ${specs[@]}; then
  return 1
fi


if [[ $# -gt 0 ]]; then
  error -1 -m 'too many arguments: ${argv}'
fi









#MARK: - Styles
local -a foreground background effects
local -a p_styles e_styles all_styles
set -A foreground  FG fg
set -A background  BG bg
set -A effects     FX fx
set -A p_styles    FG BG FX
set -A e_styles    fg bg fx
set -A all_styles  $p_styles $e_styles

# Set only the specified style arrays.
local -a styles which
case 1 in
  # Prompt or literal escape sequences.
  $+opts[-p]) styles+=($p_styles)   ;|
  $+opts[-e]) styles+=($e_styles)   ;|
  # Styles to set.
  $+opts[-f]) which+=($foreground)  ;|
  $+opts[-b]) which+=($background)  ;|
  $+opts[-x]) which+=($effects)     ;|
esac


# If neither prompt (-p) nor literal (-e)
# style option is specified, set all styles.
if [[ ${#styles} -eq 0 ]]; then
  set -A styles $all_styles
fi

# If any of '-f', '-b', or '-x' is set,
# restrict styles to foreground, background,
# and text effects, respectively.
if [[ ${#which} -gt 0 ]]; then
  set -A styles ${styles:*which}
fi


if [[ ${+opts[-U]} -eq 1 ]]; then
  # If '-U' is set, unset all styles.
  unset -m -- "${all_styles[@]}"
elif [[ ${+opts[-u]} -eq 1 ]]; then
  # If '-u' is set, unset changed styles.
  unset -m -- "${styles[@]}"
fi








# Set styles
local style color_name num effect_name effect c
for style in ${styles[@]}; do
  typeset -g -AH -- $style
  
  case $style in
    # FG - 256 prompt foreground colors.
    (FG)
      for num in {000..255}; do
        FG[$num]="%{${E}[38;5;${num}m%}"
      done
    ;;
    # BG - 256 prompt background colors.
    (BG)
      for num in {000..255}; do
        BG[$num]="%{${E}[48;5;${num}m%}"
      done
    ;;
    # FX - prompt visual effects.
    (FX)
      for effect_name effect in ${(@kv)color[(R)<0-29>]}; do
        FX[$effect_name]="%{${E}[${effect}m%}"
      done
    ;;
    
    # fg - 8 foreground colors.
    (fg)
      for color_name num in ${(@kvaO)color[(I)<30-39>]}; do
        fg[$color_name]="${E}[${num}m"
      done
    ;;
    # bg - 8 background colors.
    (bg)
      for color_name num in ${(@kvaO)color[(I)<30-39>]}; do
        let num="$num + 10"
        bg[$color_name]="${E}[${num}m"
      done
    ;;
    # fx - visual effects.
    (fx)
      for effect_name effect in ${(kv)color[(R)<0-29>]}; do
        fx[$effect_name]="${E}[${effect}m"
      done
    ;;
    
    (*) error -1 -m 'bad style: ${style}' ;;
  esac
  
  # If '-V' is set, print style.
  if [[ ${+opts[-V]} -eq 1 ]]; then
    print -Pr      -- "%F{4}%B%U${style}%u%b%f"
    print -nr -aC2 -- "${(@Pkvqqqq)^style}"$'\033[0m'
    print
  fi
done


# If '-v' is set, print all changed styles.
if [[ ${+opts[-v]} -eq 1 || ${+opts[-V]} -eq 1 ]]; then
  print -Pf 'Set %s styles: %s.\n' \
         -- "%F{4}${#styles}%f" "%F{4}%B${(j:, :)styles:-none}%b%f" >&2
fi




#function spectrum_effect() {
#  printf "%b%s%b\n" "$fx[$0]" "$@" "$fx[none]"
#}


#TODO: - Style Functions
#case 1 in
#  # -F: foreground color style functions (red, green, etc.).
#  $+opts[-F])
#
#
##    set -A style_functions
##  print -- ${(k)fg:#default}
##    function ${(k)^fg:#default} {
##      printf '%b%s%b\n' "${fg[$0]}" "$@" "${fg[default]}"
##    }
#  ;|
#  # -B: background color style functions (red-bg, green-bg, etc.).
#  $+opts[-B])
#    function ${(k)^bg:#default}'-bg' {
#      printf '%b%s%b\n' "${bg[${0%%-*}]}" "$@" "${bg[default]}"
#    }
#  ;|
#  # -X: text effect style functions (bold, underline, etc.).
#  $+opts[-X])
#    function ${(k)fx} {
#      printf '%b%s%b\n' "${fx[$0]}" "$@" "${fx[none]}"
#    }
#  ;|
#esac




#MARK: - Aliases
case 1 in
  # -B:
  ${+opts[-H]})
    for color_name num in ${(@kvaO)color[(I)<30-39>]}; do
      if [[ $color_name == 'default' ]]; then
        continue
      fi
      let num="$num + 60"
      fg[${(C)color_name}]="${E}[${num}m"
      let num="$num + 10"
      bg[${(C)color_name}]="${E}[${num}m"
    done
  ;|
  # -c: fg,bg[000..255] = FG,BG[000..255]
  ${+opts[-c]})
    for c in {000..255}; do
      fg[$c]=${(%)FG[$c]}
      bg[$c]=${(%)BG[$c]}
    done
  ;|
  
  # -D: FG,BG[-] = fg,bg[default]
  ${+opts[-D]})
    FG[-]=$fg[default]
    BG[-]=$bg[default]
  ;|
  # -d: fg,bg[-] = fg,bg[default]
  $+opts[-d])
    fg[-]=$fg[default]
    bg[-]=$bg[default]
  ;|
  
  # -M: FX[-] = fx[normal]
  $+opts[-M])
    FX[-]=$fx[normal]
  ;|
  # -m: fx[-]: fx[normal]
  $+opts[-m])
    fx[-]=$fx[normal]
  ;|
  
  # -Z: FG,BG[0..99] = [000..099]
  $+opts[-Z])
    for c in {0..99}; do
      local -iZ3 col="$c"
      FG[$c]=$FG[$col]
      BG[$c]=$BG[$col]
    done
  ;|
  # -z: fg,bg[0..99] = [000..099]
  $+opts[-z])
    for c in {0..99}; do
      local -iZ3 col="$c"
      fg[$c]=${(%)FG[$col]}
      bg[$c]=${(%)BG[$col]}
    done
  ;|
  
  
  $+opts[-F])
    typeset -a style_functions
    style_functions=( ${(k)fg:#default} )
    print -- $style_functions
    function ${style_functions[@]} {
      if [[ ! -t 0 || -p /dev/stdin ]]; then
        set -- $@
      fi
      printf "$fg[$0]%s$fg[default]\n" "$@"
      return "$# == 0"
    }
  ;|
esac


return 0
