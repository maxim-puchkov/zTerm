#!/bin/zsh

#  casex
#  zTerm (id: 134)
#
#  Generated by 'zfn' on 2020-11-05
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# casex
#
# Options:
# -v <value> :: Set the value to be matched by patterns
# -p <pattern> :: Set the pattern to match values
#
# Usage:
# casex [-x <value>] pattern [pattern...]
emulate -LR zsh


# Function options
local -A opts
local -a specs
specs=('v:' 'p:')
if [[ $# -gt 0 ]] &&
   {! zparseopts -D -K -M -A opts - $specs}; then
  return 1
fi
# Check option values
if [[ ${+opts[-v]} -eq 0 ]] &&
   [[ ${+opts[-p]} -eq 0 ]]; then
  local alt1='"-v <value>"' alt2='"-p <pattern>"'
  error -1 -m 'either ${alt1} or ${alt2} must be specified'
fi


local -i color_t=2 color_f=1 color_p=4

# Function arguments
if [[ $# -eq 0 ]]; then
  error -1 -m 'not enough arguments'
fi
local value pattern
case 1 in
  # -v <value>: set value for matching by patterns (arguments)
  ${+opts[-v]})
    value=${opts[-v]}
    for pattern; do
      case "$value" in
        (${~pattern}) print -P "Value '%F{$color_t}%U${value}%u%f' matches '%F{$color_p}%U${pattern}%u%f'" ;;
        (*) print -P -- "Value '%F{$color_f}%U${value}%u%f' does not match '%F{$color_p}%U${pattern}%u%f'" ;;
      esac
    done
  ;;
  # -p <pattern>: set pattern to match values (arguments)
  ${+opts[-p]})
    pattern=${opts[-p]}
    for value; do
      case "$value" in
        (${~pattern}) print -P "Value '%F{$color_t}%U${value}%u%f' matches '%F{$color_p}%U${pattern}%u%f'" ;;
        (*) print -P -- "Value '%F{$color_f}%U${value}%u%f' does not match '%F{$color_p}%U${pattern}%u%f'" ;;
      esac
    done
  ;;
esac

return 0

