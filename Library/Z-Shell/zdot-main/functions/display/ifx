#!/bin/zsh

#  ifx
#  zTerm (id: 133)
#
#  Generated by 'zfn' on 2020-11-05
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# ifx
#
# Evaluate multiple expressions at once.
#
# Usage:
# ifx [ [ -op arg ] ... ]
#     [ [ arg1 -op arg2 ] ... ]
emulate -LR zsh


local -a expr
local -i result

# Group unary and binary conditions with arguments.
while [[ "$1" =~ ^[-] && -n "$2" ]] ||
      [[ -n "$1" && "$2" =~ ^[-] && -n "$3" ]]; do
  # Make an expression
  unset expr result
  
  case "$1" in
    # Unary: [[ -n "$var" ]]
    -*) expr=($1 $2)
        shift 2 ;;
    # Binary: [[ $x -gt $y ]]
    *)  expr=($1 $2 $3)
        shift 3 ;;
  esac
  # Evaluate the expression
  eval "[[ $expr ]]"
  let result=$?
  # Print result (true/false)
  printzf "[[ $expr ]] is %0(r.$fg[green]true.$fg[red]false)$fg[default]" r:$result
done

# If there are more arguments, the expression was
# incorrect or incomplete.
if [[ $# -gt 0 ]]; then
  error -1 -m 'not an expression: ${argv}'
fi

return 0

