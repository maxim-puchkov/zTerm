#!/bin/zsh

#  syntaxf
#  Z-Function (70)
#
#  Created by Maxim Puchkov on 2020-06-21.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# syntaxf
#
# Highlight shell parameters in text.
#
# Usage:
# `syntaxf [ text ]'
emulate -LR zsh

# Append input after arguments.
if [[   -p /dev/stdin ]] ||
   [[ ! -t 0 ]]; then
  local -a input
  pipeset -a input </dev/stdin
  set -- $argv $input
fi

# Set colors.
local syntaxf_style_ok=${(%)FX[underline]}
local syntaxf_style_bad=${(%)FG[001]}
local syntaxf_style_reset=${(%)FX[reset]}

# Set Find & Replace values.
local find='(^|[^\])[$]{([^}]+)}'
local replace_set="$syntaxf_style_ok"'${\2}'"$syntaxf_style_reset"
local replace_not_set="$syntaxf_style_bad"'null'"$syntaxf_style_reset"
local replace='\1${${\2:+'$replace_set'}:-'$replace_not_set'}'

# Substitute.
printf '%s\n' "$*" |
/usr/bin/sed -E -e "s#${find}#${replace}#g"

return $?


## Format syntax
#function syntaxf() {(
#    typeset -i replace_color=4
#    if [[ $1 == '-c' ]]; then
#        replace_color=$2
#        shift 2
#    fi
#    # echo '${a:b:c} hey bob \${hey}' | sed -E -e 's/(^|[^\])[$][{]([^}]+)[}]/${\2:+'$(red '${\2}')'}:-'$(green '${\2')'__End}/g'
#    typeset find replace
#    find='([^\\])?\$\{((\(.+\))?([!@#$%^&*-]|[[:alnum:]_]+)(:.+)?)\}'
#    replace='\1${${\2:+'$(esc 4 -t '${\2}' -r 0)'}:-"'$(esc 33 -t '<no value>' -r 0)'"}'
#    /usr/bin/sed -E -e 's/'$find'/'$replace'/g' <<< "$argv"
#    return 0
#)}
#
