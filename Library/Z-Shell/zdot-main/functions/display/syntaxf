#!/bin/zsh

#  syntaxf
#  Z-Function (70)
#
#  Created by Maxim Puchkov on 2020-06-21.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# syntaxf
#
# Highlight shell parameters in text.
# Unexpanded parameters of type '${name}' are substituted
# with unerlined value of 'name' or with red "null" label.
#
# If a parameter is not enclosed in curly braces { }, then
# its value will be printed as is.
#
#
#
# Usage:
# `syntaxf [ text ]'
#
#
#
# Examples:
# * Unerline parameters HOME and USER in variable 'original_text'
#   and store the result in 'formatted_text':
#   - typeset original_text='Display ${HOME} directory of user ${USER}'
#   - typeset formatted_text=$(syntaxf $original_text)
# * Result: "Display ${${HOME:+${HOME}}:-null} directory of user ${${USER:+${USER}}:-null}"
#
# * Underline parameter SHLVL, do not format parameter SHELL,
#   and print "null" for invalid parameter USR in 'text'
#   - typeset text='${SHLVL} $SHELL ${USR}'
# * Result: "${${SHLVL:+${SHLVL}}:-null} $SHELL ${${USR:+${USR}}:-null}"
#
# * Print the formatted text:
#   - print -P -- $formatted_text
#   - print -- ${(e)formatted_text}
emulate -LR zsh

if autoload -Uz spectrum; then
  spectrum
fi


# Append input after arguments.
if [[   -p /dev/stdin ]] ||
   [[ ! -t 0 ]]; then
  local -a syntaxf_input
  set -A syntaxf_input ${(@f)"$(<&0)"}
  set -- $argv $syntaxf_input
fi


# Set colors.
local syntaxf_style_ok=${(%)FX[underline]}
local syntaxf_style_bad=${(%)FG[001]}
local syntaxf_style_reset=${(%)FX[reset]}


# Set Find & Replace values.
local find='(^|[^\])[$]{([^}]+)}'
local replace_set="$syntaxf_style_ok"'${\2}'"$syntaxf_style_reset"
local replace_not_set="$syntaxf_style_bad"'null'"$syntaxf_style_reset"
local replace='\1${${\2:+'$replace_set'}:-'$replace_not_set'}'


# Substitute ${variables} with underlined ${variables}
# or with red "null" label. 
printf '%s\n' "$*" |
/usr/bin/sed -E -e "s#${find}#${replace}#g"


return $?
