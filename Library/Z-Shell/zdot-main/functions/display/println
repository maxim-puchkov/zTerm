#!/bin/zsh

#  New File
#  /usr/local/zterm/zsh/functions (id: 86)
#
#  Generated by 'ztemplate' (zterm/zsh/sources) on 2020-10-15
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# New File
#
# <#Description...#>
#
# Usage:
# New File <#usage...#>
emulate -LR zsh


# Options
# -s :: Line padding string :: ( "*" "-" "_" "#" "%" )
# -w :: Line width :: ( "$COLUMNS" "$COLUMNS/2" )
# -F :: Always use full line width
# -I :: Indent text
# --fg :: Foreground color :: ( {000..255} )
# --bg :: Background color :: ( {000..255} )
# -b :: Bold
# -i :: Italic
# -u :: Underline
# -B :: Blink
# -S :: Standout
# -D :: Dim
local -A opts
opts=([-s]='*')
local -a {alt,}specs
specs=('s:' 'w:'  'L' 'I'  '-fg:' '-bg:'  'b' 'i' 'u'  'B' 'S' 'D')
altspecs=('F:=-fg' 'K:=-bg')
if [[ $# -gt 0 ]] &&
   {! zparseopts -D -K -M -A opts - $specs $altspecs}; then
  return 1
fi


# Variables
local line="$argv"
local str
local -i w
local -i -Z3 color_number=000


case 1 in
  # -w <num>: line width
  ${+opts[-w]}) let w=${opts[-w]} ;|
  # -c <text>: line characters
  ${+opts[-s]}) str="${opts[-s]}" ;|
  
  # -I: indent text 1 space
  ${+opts[-I]}) argv=" ${argv} " ;|
  # -L: full line width
  ${+opts[-L]}) let w=$COLUMNS ;|
  
  ${+w}) line=${(pr:$w::$str:)argv} ;|
  
  # --fg <color>: foreground color
  ${+opts[--fg]})
    color_number=${opts[--fg]}
    line="${(%)FG[$color_number]}${line}${fg[default]}" ;|
  
  # --bg <color>: background color
  ${+opts[--bg]})
    color_number=${opts[--bg]}
    line="${(%)BG[$color_number]}${line}${bg[default]}" ;|
  
  # -b: bold
  ${+opts[-b]}) line="${(%)FX[bold]}${line}${(%)FX[no-bold]}" ;|
  # -i: italic
  ${+opts[-i]}) line="${(%)FX[italic]}${line}${(%)FX[no-italic]}" ;|
  # -u: underline
  ${+opts[-u]}) line="${(%)FX[underline]}${line}${(%)FX[no-underline]}" ;|
  
  # -B: blink
  ${+opts[-B]}) line="${(%)FX[blink]}${line}${(%)FX[no-blink]}" ;|
  # -S: standout
  ${+opts[-S]}) line="${(%)FX[reverse]}${line}${(%)FX[no-reverse]}" ;|
  # -d: dim
  ${+opts[-D]}) line="${(%)FX[dim]}${line}${(%)FX[no-dim]}" ;|
esac


# Print line
print -n -C1 -- "${line}"
return $?
