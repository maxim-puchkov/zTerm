#!/bin/zsh

#  error
#  /usr/local/zterm/zsh/functions (id: 29)
#
#  Generated by 'ztemplate_apply' (zterm/zsh/sources) on 2020-10-10
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# error
#
# Print error message and return from calling function.
#
# Usage:
# error [-c num] [-m message] [--color color]
#       [--usage "line1[; line2[; ...]]"]
emulate -LR zsh
setopt extendedglob


# If 'SET_ERROR_TRAP' is 1 (default), then
# the caller caller will return immediately
# if the error's exit code is non-zero.
if [[ ! -v SET_ERROR_TRAP ]]; then
  export -i SET_ERROR_TRAP=1
fi


# Make the first option '-<number>'
# equivalent to '--code <number>'.
if [[ "$1" =~ ^[-][0-9]+$ ]]; then
  set -- '--code' ${1#-} ${argv:2}
fi


# Options
local -A opts
opts=([--code]="1" [--color]="red")
local -a specs
specs=('-code:'    'c:=-code'     '-trace'   'T=-trace'   '-color:'
       '-message:' 'm:=-message'  '-usage:'  'u:=-usage' )
if [[ $# -gt 0 ]] &&
   {! zparseopts -D -E -K -M -A opts - $specs}; then
  return 1
fi
[[ $1 == '--' ]] && shift



# Prepend standard input to arguments.
if [[ -p /dev/stdin ]]; then
  local -a input
  setarray -a input /dev/stdin
  set -- $argv $input
fi




# Set variables
local -i code=${opts[--code]}  title_width=6      # Width is length of "Usage:" (6)
local c_error=${opts[--color]} c_usage='cyan'     # Error and Usage title colors
# Error message text and usage text
local -a message usage excluded_titles
set -A excluded_titles "$ZSH_ARGZERO" '\(anon\)'  # Exclude top level and anon functions
set -A message    ${opts[--message]} $argv        # Append arguments to error message
set -A usage      ${opts[--usage]}                # Usage lines delimited with "; "
# Title labels
local error_title="%F{$c_error}\${\${0#(${(j:|:)~excluded_titles})}:-Error}%f"
local usage_title="%F{$c_usage}Usage%f"




# Format message syntax
if [[ ${+functions[syntaxf]} -eq 1 ]]; then
  message="${(b)$(syntaxf $message)}"
fi


# Make an EXIT trap 
local -a error_trap=()
if [[ -n "$message" ]]; then
  error_trap+="print -P -- \"${error_title}: ${message}\""
fi
if [[ ${+opts[--trace]} -eq 1 ]]; then
  local arrow='%F{1}->%f'
  local -a trace
  set -A trace ${(pj:$arrow:)functrace//$ZSH_ARGZERO/'TopLevel'}
  error_trap+="print -P -- \"Trace: ${trace}\""
fi
if [[ -n "$usage" ]]; then
  set -A usage ${(@fs:; :)^usage}$'\n\t'
  error_trap+="print -P -x ${title_width} -- \"${usage_title}: ${usage}\""
fi
if [[ $code -ne 0 ]]; then
  error_trap+="return ${code}"
fi
# Set the trap
if [[ $SET_ERROR_TRAP -eq 1 ]]; then
  trap "{${(j:; :)error_trap}} >&2" EXIT
fi


return $code
