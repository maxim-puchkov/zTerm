#!/bin/zsh

#  show
#  Z-Function (77)
#
#  Created by Maxim Puchkov on 2020-06-30.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# show - describe a shell command or parameter
#
# Examples:
#   1. `show pax'   -->  "command /bin/pax"
#   2. `show HOME'  -->  "scalar-export-special HOME = '/Users/admin'"

#MARK: - show (4)
# -G: print skipped groups ???:
local -A __opts__
zparseopts -D -E -A __opts__ - G

local -a __{zsh_groups,result,matches}__
local -i __length__
local    __{{,type,group}name,desc,match,value}__
__zsh_groups__=(
  aliases               builtins              commands
  dis_aliases           dis_builtins          dis_functions
  dis_functions_source  dis_galiases          dis_saliases
  functions             functions_source      galiases
  history               jobdirs               jobstates
  jobtexts              modules               nameddirs
  options               parameters            saliases
  userdirs              usergroups
)

if [[ $# -eq 0 ]]; then
  error -1 -- 'nothing to show'
fi

# 1. For each 'name' (
for __name__; do
  unset __result__
  
  
  
  # 2. For each 'groupname' (aliases, functions, commands, etc.)
  for __groupname__ in $__zsh_groups__; do
    # Find a 'match' in this group for the specified 'name'.
    # If the name is a glob pattern, there may be many 'matches'.
    unset __{typename,desc,value,matches}__
    set -A __matches__  ${${(P)__groupname__}[(I)${~__name__}]}
    __typename__="${__groupname__}"
    
    
    # 3. For every 'match'
    for __match__ in $__matches__; do
      # Skip empty value
      __value__="${${(P)__groupname__}[${__match__}]}"
      #???: -
      if [[ -z "$__value__" ]]; then
        # Print empty matches if the -G flag is set
        if [[ ${+__opts__[-G]} -eq 1 ]]; then
          printf "  %b%s%b\n"   $'\e[2m' "skipping $__groupname__" $'\e[22m' >&2
        fi
        continue
      fi
      #???: -
    
      # Format value and type desc
      case "$__groupname__" in
        # Format parameter type
        ('parameters')
          # Remove matched name because it is
          # in the header of 'print-var'
          __value__="$(print-var $__name__)"
          __match__='' ;;
        # Format function
        ('functions')
          local line=$'\e[2m'${(l:$COLUMNS::-:)}$'\e[22m'
          __value__=$'\n'"${line}"$'\n'"$(fn -- def $__name__)"$'\n'"${line}" ;;
        # Command synopsis
        ('commands')
          local synopsis=$(synopsis "${__value__:t}" 2>/dev/null)
          if [[ -n "$synopsis" ]]; then
            __value__+=$'\n'"${synopsis}"
          fi ;;
      esac ##case groupname
      
      # Add description and value to result for this 'name'
      __desc__="%B>%b %U%F{5}${FX[italic]}${__typename__}${FX[no-italic]}%u %B${__match__}%f%b:"
      __result__+=("${(%)__desc__} ${__value__}")
    done ##(3)for value
    
    
  done ##(2)for groupname
  
  
  
  # Print result or error
  if [[ ${#__result__} -gt 0 ]]; then
    print -nr -C1 -- $__result__
    [[ -n "$2" ]] && printf '\n'
  else
    error -0 -m '${__name__} is not found'
  fi
  shift
done ##(1)for name


return 0
