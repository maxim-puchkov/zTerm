#!/bin/zsh

#  hx
#  Z-Function
#
#  Created by Maxim Puchkov on 2020-04-19.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# hx - `hexyl' files one by one
function hx() {
  if [[ ${+functions[$0]} -eq 1 ]]; then
    unset -f $0
    autoload $0
  fi
  
  #MARK: - Options
  typeset -a hexyl_options=()
  # Parse additional `hexyl' options
  while [[ "$1" =~ ^[-] ]]; do
    case "$1" in
      # Stop at '--'
      ('--') shift && break ;;
      
      # Add `cat' option to list
      (*) hexyl_options+=("$1") ;;
    esac
    shift
  done
  
  #
  if [[ $# -eq 0 ]]; then
    usage 'Print files one by one' \
        - 'hx [file...]'
    return 1
  fi
  printf '\n\n\n'
  
  #MARK: -
  typeset file size descs
  typeset -i  i=1 exit_code=0
  for file; do
    ## Current/Total file number
#    printf '%b[%i]%b  ' '\e[1;30;103m' $i '\e[0m'
#    let i="$i + 1"
    
    ## File header
    size="$(simplify-size $(stat -f '%z' -- $file))"  # ="$(sizeof $file)" too long
    desc="$(file -Ib -- $file)"
    printf '%b%s%b (%s; %s)\n' \
      '\e[1;4;31m' "$file" '\e[0m' \
      "$size" "$desc"
    
    ## Contents of file
    (hexyl $hexyl_options -- "$file" &&
    printf '%b[EOF]\n' '\e[2m')
    let exit_code="$exit_code+$status"
    
    ## File footer
    printf '%b%s%b\n\n\n\n' '\e[2;31m' "$file" '\e[0m'
  done
  
  printf '%s: printed %i files\n' "$0" $#
  return $exit_code
}

#function hx() {
#    typeset -a optlist=()
#    while [[ $1 =~ '^[-]' ]]; do
#        case $1 in
#            --) shift; break  ;;
#            *)  optlist+=($1) ;;
#        esac
#        shift
#    done
#    S "hexyl $optlist <&0"
#    hexyl $optlist <&0
#}


# Hexdump files.
#function hx() {
#   function __hx_dump() {
#        local filepath="$1"
#        printf "  $(bold %s)\n" "${filepath:t}"
#        if ( ! hexyl -- "$filepath" ); then
#            return 1
#        fi
#        return 0
#    }
#
#    local n_files=$#
#    local exitcode=0
#    case $n_files in
#        0)  #error 'No input files'
#            #exitcode=2
#            hexyl < /dev/stdin
#        ;;
#        1)  __hx_dump "$1"
#            exitcode=$?
#        ;;
#        *)  local i
#            for i in {1..$n_files}; do
#                local file=${@[$i]}
#                if [[ $i -gt 1 ]]; then
#                    print-line
#                fi
#                printf " $(lgrey '(%d/%d)')" $i $n_files
#                __hx_dump "$file"
#                exitcode=$(( $exitcode + $? ))
#            done
#            if [[ $exitcode -gt 0 ]]; then
#                echo
#                error "$exitcode files not found."
#            fi
#        ;;
#    esac
#
#    unfunction -m "__${0}_*"
#    return $exitcode
#}
