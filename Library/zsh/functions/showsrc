#!/bin/zsh

#  showsrc
#  Z-Function (20)
#
#  Created by Maxim Puchkov on 2020-05-05.
#  Copyright Â© 2020 Maxim Puchkov. All rights reserved.


# Description:
#   showsrc - show the source code of a command
# Synopsis:
#   showsrc command [...]
#   showsrc file [...]
function showsrc() {(
  #MARK: - Functions
  # Print source file path.
  function showsrc-print-file() {
    print -P -- "%Usource file of %B${filename}%b%u: %F{4}${file}%f."
  }
  # Print output prefix.
  function showsrc-begin() {
    showsrc-print-file
    dgrey $(print-line)
  }
  # Print output prefix.
  function showsrc-end() {
    dgrey $(print-line)
    showsrc-print-file
    printf '\n\n'
  }
  
  
  
  
  
  # Print error if file is not specified
  if [[ $# -eq 0 ]]; then
    error -1 'No input.'
  fi
  
  # Find source files in $PATH, $FPATH, and file directory
  typeset filename="$@"
  typeset -a files
  set -A files  ${(@f)"$(find -L -- $path $fpath ${filename:h} \
    -name "${filename:t}" -mindepth 1 -maxdepth 1 2>/dev/null)"}

  # Print error if file is not found.
  if [[ ${#files} -eq 0 ]]; then
    error -1 'Cannot find source files of ${filename}.'
  fi
  
  typeset -i i=1
  for file in $files; do
    ## Header
    printf '%b%i/%i%b> ' '\e[1;45m' $i ${#files} '\e[0m'
    let i="$i + 1"
    size="$(simplify-size $(stat -f '%z' -- $file))"
    desc="$(file -Ib -- $file)"
    printf '%b%s%b (%s; %s)\n' '\e[1;34m' "$file" '\e[0m' "$size" "$desc"
    ## Body
    # Read source file (if it is executable, read only
    # printable strings) and highlight syntax.
   (if [[ ! -x $file ]]; then
      cat <$file
    else
      strings <$file
    fi | highlight)
    ## Footer
    printf '%b[EOF] %s%b\n\n\n\n' '\e[2m' "$file" '\e[0m'
  done
  return 0
)}



## <#Function description#>
#function showsrc() {
#    if [[ $# -eq 0 ]]; then
#        error -2 'No input.'
#    fi
#
#    # Find the source file
#    typeset name file
#    name="$@"
#    if [[ -e $name ]]; then
#        file=${name:a}
#    else
#        file=$(whence -p $name)
#    fi
#    if [[ -z $file ]]; then
#        error -1 "Cannot find %F{1}${name}%f."
#    fi
#    print -P -- "%USource file%u: %F{4}${file}%f\n"
#
#
#    # Highlight contents of non-executable files or
#    # highlight all strings in executable files
#    if [[ ! -x $file ]]; then
#        highlight $file
#    else
#        strings $file | highlight
#    fi
#    return $?

## -----

#
#    local file=$1
#    if [[ -z $file ]]; then
#        error -2 'No input'
#    fi
#
#    local highlight=( pygmentize -f 'terminal16m'
#                                 -O style='xcodedark'
#                                 -l 'zsh' )
#    if [[ -z ${commands[pygmentize]} ]]; then
#        warning 'Cannot find pygments.'
#        highlight='cat'
#    fi
#
#
#
#    if [[ ! -f $file ]]; then
#        file=$( whence -p $file )
#        if [[ $? -ne 0 ]]; then
#            return 1
#        fi
#    fi
#
##    local t types
##    types=( files aliases commands )
##    for t in $types; do
##        path=$($t $name)
##    done
#
#
#
#    strings $file | $highlight
#    return 0
#}
